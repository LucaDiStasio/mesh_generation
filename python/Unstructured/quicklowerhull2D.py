# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def quicklowerhull2D(p=None,printflag=None,*args,**kwargs):
    varargin = quicklowerhull2D.varargin
    nargin = quicklowerhull2D.nargin

    ##
#        Project: Fluid-Structure Interaction on Deformable Surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: April 16th, 2014
#    Last update: April 16th, 2014
    
    #          Input: N x 3 vector points in plane (indices + coordinates)
#         Output: M x 1 vector of indeces of points belonging to the hull
    
    ##
    
    N=size(p,1)
    A,Ia=mintournamenttree(p,true,2,nargout=2)
    B,Ib=maxtournamenttree(p,true,2,nargout=2)
    pold=copy(p)
    p=matlabarray([])
    for i in arange(1,N).reshape(-1):
        if i != Ia and i != Ib:
            p=matlabarray(cat([p],[pold[i,:]]))
    
    p,Ip=mintournamenttree(p,false,2,nargout=2)
    clear('Ip')
    #------------------------------ LOWER HULL --------------------------------
    
    Dindex=0
    ABDarea=0
    tochecklower=matlabarray([])
    for i in arange(1,N - 2).reshape(-1):
        area=orient2D(B[1,2:end()].T,A[1,2:end()].T,p[i,2:end()].T)
        if area > 0 and area > ABDarea:
            if Dindex != 0:
                tochecklower=matlabarray(cat([tochecklower],[Dindex]))
            Dindex=copy(i)
            ABDarea=copy(area)
        else:
            if area >= 0:
                tochecklower=matlabarray(cat([tochecklower],[i]))
    
    D=p[Dindex,:]
    if printflag:
        figure()
        plot(p[:,2],p[:,3],'*')
        hold('on')
        for i in arange(1,size(tochecklower,1)).reshape(-1):
            plot(p[tochecklower[i,1],2],p[tochecklower[i,1],3],'gd','LineWidth',2)
            hold('on')
        plot(A[:,2],A[:,3],'rd','LineWidth',2)
        hold('on')
        plot(B[:,2],B[:,3],'rd','LineWidth',2)
        hold('on')
        plot(D[:,2],D[:,3],'kd','LineWidth',2)
        hold('on')
        plot(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        pause
    
    tochecklowerAD=matlabarray([])
    tochecklowerDB=matlabarray([])
    for i in arange(1,size(tochecklower,1)).reshape(-1):
        area=orient2D(B[1,2:end()].T,A[1,2:end()].T,p[tochecklower[i],2:end()].T)
        areaAD=orient2D(D[1,2:end()].T,A[1,2:end()].T,p[tochecklower[i],2:end()].T)
        if (areaAD > 0 and area > 0) or (orient2D(B[1,2:end()].T,D[1,2:end()].T,p[tochecklower[i],2:end()].T) > 0 and area > 0):
            if areaAD >= 0:
                tochecklowerAD=matlabarray(cat([tochecklowerAD],[tochecklower[i]]))
            else:
                tochecklowerDB=matlabarray(cat([tochecklowerDB],[tochecklower[i]]))
    
    if printflag:
        figure()
        plot(p[:,2],p[:,3],'*')
        hold('on')
        for i in arange(1,size(tochecklowerAD,1)).reshape(-1):
            plot(p[tochecklowerAD[i,1],2],p[tochecklowerAD[i,1],3],'gd','LineWidth',2)
            hold('on')
        plot(A[:,2],A[:,3],'rd','LineWidth',2)
        hold('on')
        plot(B[:,2],B[:,3],'rd','LineWidth',2)
        hold('on')
        plot(C(arange(),2),C(arange(),3),'kd','LineWidth',2)
        hold('on')
        plot(D[:,2],D[:,3],'kd','LineWidth',2)
        hold('on')
        plot(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),'--k','LineWidth',2)
        hold('on')
        plot(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        fprintf('There are %d points to check\\n',size(tochecklowerAD,1))
        pause
    
    tochecklowerAD=matlabarray(cat(tochecklowerAD,dot(D[1,1],ones(length(tochecklowerAD),1)),dot(D[1,2],ones(length(tochecklowerAD),1)),dot(D[1,3],ones(length(tochecklowerAD),1)),dot(A[1,1],ones(length(tochecklowerAD),1)),dot(A[1,2],ones(length(tochecklowerAD),1)),dot(A[1,3],ones(length(tochecklowerAD),1))))
    indexhullAD=matlabarray([])
    while logical_not(isempty(tochecklowerAD)):

        Xindex=0
        ADXarea=0
        localD=tochecklowerAD[1,2:4]
        localA=tochecklowerAD[1,5:7]
        currentindex=0
        for i in arange(1,size(tochecklowerAD,1)).reshape(-1):
            area=orient2D(localD[1,2:end()].T,localA[1,2:end()].T,p[tochecklowerAD[i],2:end()].T)
            if area > 0 and area > ADXarea:
                currentindex=copy(i)
                Xindex=tochecklowerAD[i,1]
                ADXarea=copy(area)
        tochecklowerAD=matlabarray(cat([tochecklowerAD[1:currentindex - 1,:]],[tochecklowerAD[currentindex + 1:end(),:]]))
        tempchecklowerAD=copy(tochecklowerAD)
        tochecklowerAD=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullAD=matlabarray(cat([indexhullAD],[Xindex]))
            if printflag:
                plot(cat([X[:,2]],[localD[:,2]]),cat([X[:,3]],[localD[:,3]]),'--k','LineWidth',2)
                hold('on')
                plot(cat([localA[:,2]],[X[:,2]]),cat([localA[:,3]],[X[:,3]]),'--k','LineWidth',2)
                hold('on')
            for i in arange(1,size(tempchecklowerAD,1)).reshape(-1):
                if tempchecklowerAD[i,2] == localD[1,1] and tempchecklowerAD[i,5] == localA[1,1]:
                    if orient2D(localD[1,2:end()].T,X[1,2:end()].T,p[tempchecklowerAD[i,1],2:end()].T) > 0 or orient2D(X[1,2:end()].T,localA[1,2:end()].T,p[tempchecklowerAD[i,1],2:end()].T) > 0:
                        if orient2D(localD[1,2:end()].T,X[1,2:end()].T,p[tempchecklowerAD[i,1],2:end()].T) > 0:
                            tochecklowerAD=matlabarray(cat([tochecklowerAD],[tempchecklowerAD[i,1],tempchecklowerAD[i,2:4],p[Xindex,:]]))
                        else:
                            tochecklowerAD=matlabarray(cat([tochecklowerAD],[tempchecklowerAD[i,1],p[Xindex,:],tempchecklowerAD[i,5:7]]))
                else:
                    tochecklowerAD=matlabarray(cat([tochecklowerAD],[tempchecklowerAD[i,:]]))
        if printflag:
            plot(cat([localD[:,2]],[localA[:,2]]),cat([localD[:,3]],[localA[:,3]]),'--k','LineWidth',2)
            hold('on')
            for i in arange(1,size(tochecklowerAD,1)).reshape(-1):
                plot(p[tochecklowerAD[i,1],2],p[tochecklowerAD[i,1],3],'gd','LineWidth',2)
                hold('on')
            grid('on')
            xlabel('x')
            ylabel('y')
            title('Convex hull')
            fprintf('There are %d points to check\\n',size(tochecklowerAD,1))
            pause

    
    if printflag:
        figure()
        plot(p[:,2],p[:,3],'*')
        hold('on')
        for i in arange(1,size(tochecklowerDB,1)).reshape(-1):
            plot(p[tochecklowerDB[i,1],2],p[tochecklowerDB[i,1],3],'gd','LineWidth',2)
            hold('on')
        plot(A[:,2],A[:,3],'rd','LineWidth',2)
        hold('on')
        plot(B[:,2],B[:,3],'rd','LineWidth',2)
        hold('on')
        plot(C(arange(),2),C(arange(),3),'kd','LineWidth',2)
        hold('on')
        plot(D[:,2],D[:,3],'kd','LineWidth',2)
        hold('on')
        plot(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),'--k','LineWidth',2)
        hold('on')
        plot(cat([D[:,2]],[B[:,2]]),cat([D[:,3]],[B[:,3]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        fprintf('There are %d points to check\\n',size(tochecklowerDB,1))
        pause
    
    tochecklowerDB=matlabarray(cat(tochecklowerDB,dot(B[1,1],ones(length(tochecklowerDB),1)),dot(B[1,2],ones(length(tochecklowerDB),1)),dot(B[1,3],ones(length(tochecklowerDB),1)),dot(D[1,1],ones(length(tochecklowerDB),1)),dot(D[1,2],ones(length(tochecklowerDB),1)),dot(D[1,3],ones(length(tochecklowerDB),1))))
    indexhullDB=matlabarray([])
    while logical_not(isempty(tochecklowerDB)):

        Xindex=0
        DBXarea=0
        localB=tochecklowerDB[1,2:4]
        localD=tochecklowerDB[1,5:7]
        currentindex=0
        for i in arange(1,size(tochecklowerDB,1)).reshape(-1):
            area=orient2D(localB[1,2:end()].T,localD[1,2:end()].T,p[tochecklowerDB[i],2:end()].T)
            if area > 0 and area > DBXarea:
                currentindex=copy(i)
                Xindex=tochecklowerDB[i,1]
                DBXarea=copy(area)
        tochecklowerDB=matlabarray(cat([tochecklowerDB[1:currentindex - 1,:]],[tochecklowerDB[currentindex + 1:end(),:]]))
        tempchecklowerDB=copy(tochecklowerDB)
        tochecklowerDB=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullDB=matlabarray(cat([indexhullDB],[Xindex]))
            if printflag:
                plot(cat([X[:,2]],[localB[:,2]]),cat([X[:,3]],[localB[:,3]]),'--k','LineWidth',2)
                hold('on')
                plot(cat([localD[:,2]],[X[:,2]]),cat([localD[:,3]],[X[:,3]]),'--k','LineWidth',2)
                hold('on')
            for i in arange(1,size(tempchecklowerDB,1)).reshape(-1):
                if tempchecklowerDB[i,2] == localB[1,1] and tempchecklowerDB[i,5] == localD[1,1]:
                    if orient2D(localB[1,2:end()].T,X[1,2:end()].T,p[tempchecklowerDB[i,1],2:end()].T) > 0 or orient2D(X[1,2:end()].T,localD[1,2:end()].T,p[tempchecklowerDB[i,1],2:end()].T) > 0:
                        if orient2D(localB[1,2:end()].T,X[1,2:end()].T,p[tempchecklowerDB[i,1],2:end()].T) > 0:
                            tochecklowerDB=matlabarray(cat([tochecklowerDB],[tempchecklowerDB[i,1],tempchecklowerDB[i,2:4],p[Xindex,:]]))
                        else:
                            tochecklowerDB=matlabarray(cat([tochecklowerDB],[tempchecklowerDB[i,1],p[Xindex,:],tempchecklowerDB[i,5:7]]))
                else:
                    tochecklowerDB=matlabarray(cat([tochecklowerDB],[tempchecklowerDB[i,:]]))
        if printflag:
            plot(cat([localB[:,2]],[localD[:,2]]),cat([localB[:,3]],[localD[:,3]]),'--k','LineWidth',2)
            hold('on')
            for i in arange(1,size(tochecklowerDB,1)).reshape(-1):
                plot(p[tochecklowerDB[i,1],2],p[tochecklowerDB[i,1],3],'gd','LineWidth',2)
                hold('on')
            grid('on')
            xlabel('x')
            ylabel('y')
            title('Convex hull')
            fprintf('There are %d points to check\\n',size(tochecklowerDB,1))
            pause

    
    lowerhullAD=matlabarray([])
    for i in arange(1,size(indexhullAD,1)).reshape(-1):
        lowerhullAD=matlabarray(cat([lowerhullAD],[p[indexhullAD[i,1],:]]))
    
    lowerhullDB=matlabarray([])
    for i in arange(1,size(indexhullDB,1)).reshape(-1):
        lowerhullDB=matlabarray(cat([lowerhullDB],[p[indexhullDB[i,1],:]]))
    
    if logical_not(isempty(lowerhullAD)):
        lowerhullAD,Iad=mintournamenttree(lowerhullAD,false,2,nargout=2)
    
    if logical_not(isempty(lowerhullDB)):
        lowerhullDB,Idb=mintournamenttree(lowerhullDB,false,2,nargout=2)
    
    #-------------------------- LOWER CONVEX HULL -----------------------------
    
    lowerhull=matlabarray(cat([A],[lowerhullAD],[D],[lowerhullDB],[B]))
    return lowerhull,A,B,D
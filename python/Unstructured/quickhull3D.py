# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def quickhull3D(p=None,printflag=None,*args,**kwargs):
    varargin = quickhull3D.varargin
    nargin = quickhull3D.nargin

    ##
#        Project: Fluid-Structure Interaction on Deformable Surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: April 17th, 2014
#    Last update: April 22nd, 2014
    
    #          Input: N x 4 vector points in space (indices + coordinates)
#         Output: M x 1 vector of indeces of points belonging to the hull
    
    ##
    
    N=size(p,1)
    Xmin,Ixmin=mintournamenttree(p,true,2,nargout=2)
    Xmax,Ixmax=maxtournamenttree(p,true,2,nargout=2)
    Ymin,Iymin=mintournamenttree(p,true,3,nargout=2)
    Ymax,Iymax=maxtournamenttree(p,true,3,nargout=2)
    Zmin,Izmin=mintournamenttree(p,true,4,nargout=2)
    Zmax,Izmax=maxtournamenttree(p,true,4,nargout=2)
    distances=matlabarray(cat([Xmin[1,:],Xmax[1,:],0],[Xmin[1,:],Ymin[1,:],0],[Xmin[1,:],Ymax[1,:],0],[Xmin[1,:],Zmin[1,:],0],[Xmin[1,:],Zmax[1,:],0],[Xmax[1,:],Ymin[1,:],0],[Xmax[1,:],Ymax[1,:],0],[Xmax[1,:],Zmin[1,:],0],[Xmax[1,:],Zmax[1,:],0],[Ymin[1,:],Ymax[1,:],0],[Ymin[1,:],Zmin[1,:],0],[Ymin[1,:],Zmax[1,:],0],[Ymax[1,:],Zmin[1,:],0],[Ymax[1,:],Zmax[1,:],0],[Zmin[1,:],Zmax[1,:],0]))
    for i in arange(1,size(distances,1)).reshape(-1):
        distances[i,9]=sqrt((distances[i,6] - distances[i,2]) ** 2 + (distances[i,7] - distances[i,3]) ** 2 + (distances[i,8] - distances[i,4]) ** 2)
    
    distmax,Idist=maxtournamenttree(distances,true,2,nargout=2)
    A=distmax[1,1:4]
    B=distmax[1,5:8]
    if 1 == Idist:
        tocheck=matlabarray(cat([Ymin[1,:]],[Ymax[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
    else:
        if 2 == Idist:
            tocheck=matlabarray(cat([Xmax[1,:]],[Ymax[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
        else:
            if 3 == Idist:
                tocheck=matlabarray(cat([Xmax[1,:]],[Ymin[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
            else:
                if 4 == Idist:
                    tocheck=matlabarray(cat([Xmax[1,:]],[Ymin[1,:]],[Ymax[1,:]],[Zmax[1,:]]))
                else:
                    if 5 == Idist:
                        tocheck=matlabarray(cat([Xmax[1,:]],[Ymin[1,:]],[Ymax[1,:]],[Zmin[1,:]]))
                    else:
                        if 6 == Idist:
                            tocheck=matlabarray(cat([Xmin[1,:]],[Ymax[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
                        else:
                            if 7 == Idist:
                                tocheck=matlabarray(cat([Xmin[1,:]],[Ymin[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
                            else:
                                if 8 == Idist:
                                    tocheck=matlabarray(cat([Xmin[1,:]],[Ymin[1,:]],[Ymax[1,:]],[Zmax[1,:]]))
                                else:
                                    if 9 == Idist:
                                        tocheck=matlabarray(cat([Xmin[1,:]],[Ymin[1,:]],[Ymax[1,:]],[Zmin[1,:]]))
                                    else:
                                        if 10 == Idist:
                                            tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Zmin[1,:]],[Zmax[1,:]]))
                                        else:
                                            if 11 == Idist:
                                                tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Ymax[1,:]],[Zmax[1,:]]))
                                            else:
                                                if 12 == Idist:
                                                    tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Ymax[1,:]],[Zmin[1,:]]))
                                                else:
                                                    if 13 == Idist:
                                                        tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Ymin[1,:]],[Zmax[1,:]]))
                                                    else:
                                                        if 14 == Idist:
                                                            tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Ymin[1,:]],[Zmin[1,:]]))
                                                        else:
                                                            if 15 == Idist:
                                                                tocheck=matlabarray(cat([Xmin[1,:]],[Xmax[1,:]],[Ymin[1,:]],[Ymax[1,:]]))
    
    Cindex=0
    ABCarea=0
    for i in arange(1,length(tocheck)).reshape(-1):
        area=orient2D(A[1,2:end()].T,B[1,2:end()].T,tocheck[i,2:end()].T)
        if abs(area) > ABCarea:
            ABCarea=abs(area)
            Cindex=copy(i)
    
    C=tocheck[Cindex,:]
    Dindex=0
    ABCDvolume=0
    for i in arange(1,N).reshape(-1):
        volume=orient3D(A[1,2:end()].T,B[1,2:end()].T,C[1,2:end()].T,p[i,2:end()].T)
        if abs(volume) > ABCDvolume:
            ABCDvolume=abs(volume)
            Dindex=copy(i)
    
    D=p[Dindex,:]
    signumABC=sign(orient3D(A[1,2:end()].T,B[1,2:end()].T,C[1,2:end()].T,D[1,2:end()].T))
    signumABD=sign(orient3D(A[1,2:end()].T,B[1,2:end()].T,D[1,2:end()].T,C[1,2:end()].T))
    signumCAD=sign(orient3D(C[1,2:end()].T,A[1,2:end()].T,D[1,2:end()].T,B[1,2:end()].T))
    signumBCD=sign(orient3D(B[1,2:end()].T,C[1,2:end()].T,D[1,2:end()].T,A[1,2:end()].T))
    tocheck=matlabarray([])
    for i in arange(1,N).reshape(-1):
        if logical_not((dot(signumABC,orient3D(A[1,2:end()].T,B[1,2:end()].T,C[1,2:end()].T,p[i,2:end()].T)) >= 0 and dot(signumABD,orient3D(A[1,2:end()].T,B[1,2:end()].T,D[1,2:end()].T,p[i,2:end()].T)) >= 0 and dot(signumCAD,orient3D(C[1,2:end()].T,A[1,2:end()].T,D[1,2:end()].T,p[i,2:end()].T)) >= 0 and dot(signumBCD,orient3D(B[1,2:end()].T,C[1,2:end()].T,D[1,2:end()].T,p[i,2:end()].T)) >= 0)):
            tocheck=matlabarray(cat([tocheck],[i]))
    
    tocheckABC=matlabarray([])
    for i in arange(1,size(tocheck,1)).reshape(-1):
        if logical_not((dot(signumABC,orient3D(A[1,2:end()].T,B[1,2:end()].T,C[1,2:end()].T,p[tocheck[i,1],2:end()].T)) >= 0)):
            tocheckABC=matlabarray(cat([tocheckABC],[tocheck[i,1]]))
    
    tocheckABD=matlabarray([])
    for i in arange(1,size(tocheck,1)).reshape(-1):
        if logical_not((dot(signumABD,orient3D(A[1,2:end()].T,B[1,2:end()].T,D[1,2:end()].T,p[tocheck[i,1],2:end()].T)) >= 0)):
            tocheckABD=matlabarray(cat([tocheckABD],[tocheck[i,1]]))
    
    tocheckCAD=matlabarray([])
    for i in arange(1,size(tocheck,1)).reshape(-1):
        if logical_not((dot(signumCAD,orient3D(C[1,2:end()].T,A[1,2:end()].T,D[1,2:end()].T,p[tocheck[i,1],2:end()].T)) >= 0)):
            tocheckCAD=matlabarray(cat([tocheckCAD],[tocheck[i,1]]))
    
    tocheckBCD=matlabarray([])
    for i in arange(1,size(tocheck,1)).reshape(-1):
        if logical_not((dot(signumBCD,orient3D(B[1,2:end()].T,C[1,2:end()].T,D[1,2:end()].T,p[tocheck[i,1],2:end()].T)) >= 0)):
            tocheckBCD=matlabarray(cat([tocheckBCD],[tocheck[i,1]]))
    
    if printflag:
        figure()
        plot3(p[:,2],p[:,3],p[:,4],'*')
        hold('on')
        for i in arange(1,size(tocheck,1)).reshape(-1):
            plot3(p[tocheck[i,1],2],p[tocheck[i,1],3],p[tocheck[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 1')
        pause
        figure()
        for i in arange(1,size(tocheck,1)).reshape(-1):
            plot3(p[tocheck[i,1],2],p[tocheck[i,1],3],p[tocheck[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 2')
        pause
        figure()
        for i in arange(1,size(tocheckABC,1)).reshape(-1):
            plot3(p[tocheckABC[i,1],2],p[tocheckABC[i,1],3],p[tocheckABC[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 3')
        pause
        figure()
        for i in arange(1,size(tocheckABD,1)).reshape(-1):
            plot3(p[tocheckABD[i,1],2],p[tocheckABD[i,1],3],p[tocheckABD[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 4')
        pause
        figure()
        for i in arange(1,size(tocheckCAD,1)).reshape(-1):
            plot3(p[tocheckCAD[i,1],2],p[tocheckCAD[i,1],3],p[tocheckCAD[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 5')
        pause
        figure()
        for i in arange(1,size(tocheckBCD,1)).reshape(-1):
            plot3(p[tocheckBCD[i,1],2],p[tocheckBCD[i,1],3],p[tocheckBCD[i,1],4],'gd','LineWidth',2)
            hold('on')
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'kd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([C[:,2]],[D[:,2]]),cat([C[:,3]],[D[:,3]]),cat([C[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Building the convex hull - 6')
        pause
    
    #------------------------------- FACE ABC ---------------------------------
    
    if printflag:
        fabc=copy(figure)
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Face ABC')
    
    tocheckABC=matlabarray(cat(tocheckABC,dot(A[1,1],ones(length(tocheckABC),1)),dot(A[1,2],ones(length(tocheckABC),1)),dot(A[1,3],ones(length(tocheckABC),1)),dot(A[1,4],ones(length(tocheckABC),1)),dot(B[1,1],ones(length(tocheckABC),1)),dot(B[1,2],ones(length(tocheckABC),1)),dot(B[1,3],ones(length(tocheckABC),1)),dot(B[1,4],ones(length(tocheckABC),1)),dot(C[1,1],ones(length(tocheckABC),1)),dot(C[1,2],ones(length(tocheckABC),1)),dot(C[1,3],ones(length(tocheckABC),1)),dot(C[1,4],ones(length(tocheckABC),1))))
    indexhullABC=matlabarray([])
    while logical_not(isempty(tocheckABC)):

        Xindex=0
        ABCXvolume=0
        localA=tocheckABC[1,2:5]
        localB=tocheckABC[1,6:9]
        localC=tocheckABC[1,10:13]
        currentindex=0
        for i in arange(1,size(tocheckABC,1)).reshape(-1):
            volume=orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localC[1,2:end()].T,p[tocheckABC[i],2:end()].T)
            if abs(volume) > ABCXvolume:
                currentindex=copy(i)
                Xindex=tocheckABC[i,1]
                ABCXvolume=copy(volume)
        tempcheckABC=matlabarray(cat([tocheckABC[1:currentindex - 1,:]],[tocheckABC[currentindex + 1:end(),:]]))
        tocheckABC=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullABC=matlabarray(cat([indexhullABC],[Xindex]))
            if printflag:
                figure(fabc)
                plot3(X[:,2],X[:,3],X[:,4],'kd','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localB[:,2]]),cat([localA[:,3]],[localB[:,3]]),cat([localA[:,4]],[localB[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localC[:,2]]),cat([localA[:,3]],[localC[:,3]]),cat([localA[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[localC[:,2]]),cat([localB[:,3]],[localC[:,3]]),cat([localB[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[X[:,2]]),cat([localA[:,3]],[X[:,3]]),cat([localA[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([X[:,2]],[localC[:,2]]),cat([X[:,3]],[localC[:,3]]),cat([X[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[X[:,2]]),cat([localB[:,3]],[X[:,3]]),cat([localB[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                pause
            signumABC=sign(orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T))
            signumABX=sign(orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,localC[1,2:end()].T))
            signumCAX=sign(orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,localB[1,2:end()].T))
            signumBCX=sign(orient3D(localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,localA[1,2:end()].T))
            for i in arange(1,size(tempcheckABC,1)).reshape(-1):
                if tempcheckABC[i,2] == localA[1,1] and tempcheckABC[i,6] == localB[1,1] and tempcheckABC[i,10] == localC[1,1]:
                    if logical_not((dot(signumABC,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localC[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0 and dot(signumABX,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0 and dot(signumCAX,orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0 and dot(signumBCX,orient3D(localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0)):
                        if logical_not((dot(signumABX,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0)):
                            tocheckABC=matlabarray(cat([tocheckABC],[tempcheckABC[i,1],localA[1,:],localB[1,:],X[1,:]]))
                        else:
                            if logical_not((dot(signumCAX,orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckABC[i,1],2:end()].T)) >= 0)):
                                tocheckABC=matlabarray(cat([tocheckABC],[tempcheckABC[i,1],localC[1,:],localA[1,:],X[1,:]]))
                            else:
                                tocheckABC=matlabarray(cat([tocheckABC],[tempcheckABC[i,1],localB[1,:],localC[1,:],X[1,:]]))
                else:
                    tocheckABC=matlabarray(cat([tocheckABC],[tempcheckABC[i,:]]))
        if printflag:
            figure(fabc)
            for i in arange(1,size(tocheckABC,1)).reshape(-1):
                plot3(p[tocheckABC[i,1],2],p[tocheckABC[i,1],3],p[tocheckABC[i,1],4],'gd','LineWidth',2)
                hold('on')
            fprintf('There are %d points to check\\n',size(tocheckABC,1))
            pause

    
    #------------------------------- FACE ABD ---------------------------------
    
    if printflag:
        fabd=copy(figure)
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[B[:,2]]),cat([A[:,3]],[B[:,3]]),cat([A[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[D[:,2]]),cat([B[:,3]],[D[:,3]]),cat([B[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Face ABD')
    
    tocheckABD=matlabarray(cat(tocheckABD,dot(A[1,1],ones(length(tocheckABD),1)),dot(A[1,2],ones(length(tocheckABD),1)),dot(A[1,3],ones(length(tocheckABD),1)),dot(A[1,4],ones(length(tocheckABD),1)),dot(B[1,1],ones(length(tocheckABD),1)),dot(B[1,2],ones(length(tocheckABD),1)),dot(B[1,3],ones(length(tocheckABD),1)),dot(B[1,4],ones(length(tocheckABD),1)),dot(D[1,1],ones(length(tocheckABD),1)),dot(D[1,2],ones(length(tocheckABD),1)),dot(D[1,3],ones(length(tocheckABD),1)),dot(D[1,4],ones(length(tocheckABD),1))))
    indexhullABD=matlabarray([])
    while logical_not(isempty(tocheckABD)):

        Xindex=0
        ABDXvolume=0
        localA=tocheckABD[1,2:5]
        localB=tocheckABD[1,6:9]
        localD=tocheckABD[1,10:13]
        currentindex=0
        for i in arange(1,size(tocheckABD,1)).reshape(-1):
            volume=orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localD[1,2:end()].T,p[tocheckABD[i],2:end()].T)
            if abs(volume) > ABDXvolume:
                currentindex=copy(i)
                Xindex=tocheckABD[i,1]
                ABDXvolume=copy(volume)
        tempcheckABD=matlabarray(cat([tocheckABD[1:currentindex - 1,:]],[tocheckABD[currentindex + 1:end(),:]]))
        tocheckABD=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullABD=matlabarray(cat([indexhullABD],[Xindex]))
            if printflag:
                figure(fabd)
                plot3(X[:,2],X[:,3],X[:,4],'kd','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localB[:,2]]),cat([localA[:,3]],[localB[:,3]]),cat([localA[:,4]],[localB[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localD[:,2]]),cat([localA[:,3]],[localD[:,3]]),cat([localA[:,4]],[localD[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[localD[:,2]]),cat([localB[:,3]],[localD[:,3]]),cat([localB[:,4]],[localD[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[X[:,2]]),cat([localA[:,3]],[X[:,3]]),cat([localA[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([X[:,2]],[localD[:,2]]),cat([X[:,3]],[localD[:,3]]),cat([X[:,4]],[localD[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[X[:,2]]),cat([localB[:,3]],[X[:,3]]),cat([localB[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                pause
            signumABD=sign(orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T))
            signumABX=sign(orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,localD[1,2:end()].T))
            signumDAX=sign(orient3D(localD[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,localB[1,2:end()].T))
            signumBDX=sign(orient3D(localB[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,localA[1,2:end()].T))
            for i in arange(1,size(tempcheckABD,1)).reshape(-1):
                if tempcheckABD[i,2] == localA[1,1] and tempcheckABD[i,6] == localB[1,1] and tempcheckABD[i,10] == localD[1,1]:
                    if logical_not((dot(signumABD,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,localD[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0 and dot(signumABX,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0 and dot(signumDAX,orient3D(localD[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0 and dot(signumBDX,orient3D(localB[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0)):
                        if logical_not((dot(signumABX,orient3D(localA[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0)):
                            tocheckABD=matlabarray(cat([tocheckABD],[tempcheckABD[i,1],localA[1,:],localB[1,:],X[1,:]]))
                        else:
                            if logical_not((dot(signumDAX,orient3D(localD[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckABD[i,1],2:end()].T)) >= 0)):
                                tocheckABD=matlabarray(cat([tocheckABD],[tempcheckABD[i,1],localD[1,:],localA[1,:],X[1,:]]))
                            else:
                                tocheckABD=matlabarray(cat([tocheckABD],[tempcheckABD[i,1],localB[1,:],localD[1,:],X[1,:]]))
                else:
                    tocheckABD=matlabarray(cat([tocheckABD],[tempcheckABD[i,:]]))
        if printflag:
            figure(fabd)
            for i in arange(1,size(tocheckABD,1)).reshape(-1):
                plot3(p[tocheckABD[i,1],2],p[tocheckABD[i,1],3],p[tocheckABD[i,1],4],'gd','LineWidth',2)
                hold('on')
            fprintf('There are %d points to check\\n',size(tocheckABD,1))
            pause

    
    #------------------------------- FACE CAD ---------------------------------
    
    if printflag:
        fcad=copy(figure)
        plot3(A[:,2],A[:,3],A[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(D[:,2],D[:,3],D[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[D[:,2]]),cat([A[:,3]],[D[:,3]]),cat([A[:,4]],[D[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([A[:,2]],[C[:,2]]),cat([A[:,3]],[C[:,3]]),cat([A[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([D[:,2]],[C[:,2]]),cat([D[:,3]],[C[:,3]]),cat([D[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Face CAD')
    
    tocheckCAD=matlabarray(cat(tocheckCAD,dot(C[1,1],ones(length(tocheckCAD),1)),dot(C[1,2],ones(length(tocheckCAD),1)),dot(C[1,3],ones(length(tocheckCAD),1)),dot(C[1,4],ones(length(tocheckCAD),1)),dot(A[1,1],ones(length(tocheckCAD),1)),dot(A[1,2],ones(length(tocheckCAD),1)),dot(A[1,3],ones(length(tocheckCAD),1)),dot(A[1,4],ones(length(tocheckCAD),1)),dot(D[1,1],ones(length(tocheckCAD),1)),dot(D[1,2],ones(length(tocheckCAD),1)),dot(D[1,3],ones(length(tocheckCAD),1)),dot(D[1,4],ones(length(tocheckCAD),1))))
    indexhullCAD=matlabarray([])
    while logical_not(isempty(tocheckCAD)):

        Xindex=0
        CADXvolume=0
        localC=tocheckCAD[1,2:5]
        localA=tocheckCAD[1,6:9]
        localD=tocheckCAD[1,10:13]
        currentindex=0
        for i in arange(1,size(tocheckCAD,1)).reshape(-1):
            volume=orient3D(localC[1,2:end()].T,localA[1,2:end()].T,localD[1,2:end()].T,p[tocheckCAD[i],2:end()].T)
            if abs(volume) > CADXvolume:
                currentindex=copy(i)
                Xindex=tocheckCAD[i,1]
                CADXvolume=copy(volume)
        tempcheckCAD=matlabarray(cat([tocheckCAD[1:currentindex - 1,:]],[tocheckCAD[currentindex + 1:end(),:]]))
        tocheckCAD=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullCAD=matlabarray(cat([indexhullCAD],[Xindex]))
            if printflag:
                figure(fcad)
                plot3(X[:,2],X[:,3],X[:,4],'kd','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localD[:,2]]),cat([localA[:,3]],[localD[:,3]]),cat([localA[:,4]],[localD[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[localC[:,2]]),cat([localA[:,3]],[localC[:,3]]),cat([localA[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localD[:,2]],[localC[:,2]]),cat([localD[:,3]],[localC[:,3]]),cat([localD[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localA[:,2]],[X[:,2]]),cat([localA[:,3]],[X[:,3]]),cat([localA[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([X[:,2]],[localC[:,2]]),cat([X[:,3]],[localC[:,3]]),cat([X[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localD[:,2]],[X[:,2]]),cat([localD[:,3]],[X[:,3]]),cat([localD[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                pause
            signumCAD=sign(orient3D(localC[1,2:end()].T,localA[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T))
            signumCAX=sign(orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,localD[1,2:end()].T))
            signumDCX=sign(orient3D(localD[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,localA[1,2:end()].T))
            signumADX=sign(orient3D(localA[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,localC[1,2:end()].T))
            for i in arange(1,size(tempcheckCAD,1)).reshape(-1):
                if tempcheckCAD[i,2] == localC[1,1] and tempcheckCAD[i,6] == localA[1,1] and tempcheckCAD[i,10] == localD[1,1]:
                    if logical_not((dot(signumCAD,orient3D(localC[1,2:end()].T,localA[1,2:end()].T,localD[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0 and dot(signumCAX,orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0 and dot(signumDCX,orient3D(localD[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0 and dot(signumADX,orient3D(localA[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0)):
                        if logical_not((dot(signumCAX,orient3D(localC[1,2:end()].T,localA[1,2:end()].T,X[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0)):
                            tocheckCAD=matlabarray(cat([tocheckCAD],[tempcheckCAD[i,1],localC[1,:],localA[1,:],X[1,:]]))
                        else:
                            if logical_not((dot(signumDCX,orient3D(localD[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,p[tempcheckCAD[i,1],2:end()].T)) >= 0)):
                                tocheckCAD=matlabarray(cat([tocheckCAD],[tempcheckCAD[i,1],localD[1,:],localC[1,:],X[1,:]]))
                            else:
                                tocheckCAD=matlabarray(cat([tocheckCAD],[tempcheckCAD[i,1],localA[1,:],localD[1,:],X[1,:]]))
                else:
                    tocheckCAD=matlabarray(cat([tocheckCAD],[tempcheckCAD[i,:]]))
        if printflag:
            figure(fcad)
            for i in arange(1,size(tocheckCAD,1)).reshape(-1):
                plot3(p[tocheckCAD[i,1],2],p[tocheckCAD[i,1],3],p[tocheckCAD[i,1],4],'gd','LineWidth',2)
                hold('on')
            fprintf('There are %d points to check\\n',size(tocheckCAD,1))
            pause

    
    #------------------------------- FACE BCD ---------------------------------
    
    if printflag:
        fbcd=copy(figure)
        plot3(D[:,2],D[:,3],D[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(B[:,2],B[:,3],B[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(C[:,2],C[:,3],C[:,4],'rd','LineWidth',2)
        hold('on')
        plot3(cat([D[:,2]],[B[:,2]]),cat([D[:,3]],[B[:,3]]),cat([D[:,4]],[B[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([D[:,2]],[C[:,2]]),cat([D[:,3]],[C[:,3]]),cat([D[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        plot3(cat([B[:,2]],[C[:,2]]),cat([B[:,3]],[C[:,3]]),cat([B[:,4]],[C[:,4]]),'--k','LineWidth',2)
        hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        zlabel('z')
        title('Face BCD')
    
    tocheckBCD=matlabarray(cat(tocheckBCD,dot(B[1,1],ones(length(tocheckBCD),1)),dot(B[1,2],ones(length(tocheckBCD),1)),dot(B[1,3],ones(length(tocheckBCD),1)),dot(B[1,4],ones(length(tocheckBCD),1)),dot(C[1,1],ones(length(tocheckBCD),1)),dot(C[1,2],ones(length(tocheckBCD),1)),dot(C[1,3],ones(length(tocheckBCD),1)),dot(C[1,4],ones(length(tocheckBCD),1)),dot(D[1,1],ones(length(tocheckBCD),1)),dot(D[1,2],ones(length(tocheckBCD),1)),dot(D[1,3],ones(length(tocheckBCD),1)),dot(D[1,4],ones(length(tocheckBCD),1))))
    indexhullBCD=matlabarray([])
    while logical_not(isempty(tocheckBCD)):

        Xindex=0
        BCDXvolume=0
        localB=tocheckBCD[1,2:5]
        localC=tocheckBCD[1,6:9]
        localD=tocheckBCD[1,10:13]
        currentindex=0
        for i in arange(1,size(tocheckBCD,1)).reshape(-1):
            volume=orient3D(localB[1,2:end()].T,localC[1,2:end()].T,localD[1,2:end()].T,p[tocheckBCD[i],2:end()].T)
            if abs(volume) > BCDXvolume:
                currentindex=copy(i)
                Xindex=tocheckBCD[i,1]
                BCDXvolume=copy(volume)
        tempcheckBCD=matlabarray(cat([tocheckBCD[1:currentindex - 1,:]],[tocheckBCD[currentindex + 1:end(),:]]))
        tocheckBCD=matlabarray([])
        if Xindex != 0:
            X=p[Xindex,:]
            indexhullBCD=matlabarray(cat([indexhullBCD],[Xindex]))
            if printflag:
                figure(fbcd)
                plot3(X[:,2],X[:,3],X[:,4],'kd','LineWidth',2)
                hold('on')
                plot3(cat([localD[:,2]],[localB[:,2]]),cat([localD[:,3]],[localB[:,3]]),cat([localD[:,4]],[localB[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localD[:,2]],[localC[:,2]]),cat([localD[:,3]],[localC[:,3]]),cat([localD[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[localC[:,2]]),cat([localB[:,3]],[localC[:,3]]),cat([localB[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localD[:,2]],[X[:,2]]),cat([localD[:,3]],[X[:,3]]),cat([localD[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([X[:,2]],[localC[:,2]]),cat([X[:,3]],[localC[:,3]]),cat([X[:,4]],[localC[:,4]]),'--k','LineWidth',2)
                hold('on')
                plot3(cat([localB[:,2]],[X[:,2]]),cat([localB[:,3]],[X[:,3]]),cat([localB[:,4]],[X[:,4]]),'--k','LineWidth',2)
                hold('on')
                pause
            signumBCD=sign(orient3D(localB[1,2:end()].T,localC[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T))
            signumBCX=sign(orient3D(localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,localD[1,2:end()].T))
            signumDBX=sign(orient3D(localD[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,localC[1,2:end()].T))
            signumCDX=sign(orient3D(localC[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,localB[1,2:end()].T))
            for i in arange(1,size(tempcheckBCD,1)).reshape(-1):
                if tempcheckBCD[i,2] == localB[1,1] and tempcheckBCD[i,6] == localC[1,1] and tempcheckBCD[i,10] == localD[1,1]:
                    if logical_not((dot(signumBCD,orient3D(localB[1,2:end()].T,localC[1,2:end()].T,localD[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0 and dot(signumBCX,orient3D(localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0 and dot(signumDBX,orient3D(localD[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0 and dot(signumCDX,orient3D(localC[1,2:end()].T,localD[1,2:end()].T,X[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0)):
                        if logical_not((dot(signumBCX,orient3D(localB[1,2:end()].T,localC[1,2:end()].T,X[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0)):
                            tocheckBCD=matlabarray(cat([tocheckBCD],[tempcheckBCD[i,1],localB[1,:],localC[1,:],X[1,:]]))
                        else:
                            if logical_not((dot(signumDBX,orient3D(localD[1,2:end()].T,localB[1,2:end()].T,X[1,2:end()].T,p[tempcheckBCD[i,1],2:end()].T)) >= 0)):
                                tocheckBCD=matlabarray(cat([tocheckBCD],[tempcheckBCD[i,1],localD[1,:],localB[1,:],X[1,:]]))
                            else:
                                tocheckBCD=matlabarray(cat([tocheckBCD],[tempcheckBCD[i,1],localC[1,:],localD[1,:],X[1,:]]))
                else:
                    tocheckBCD=matlabarray(cat([tocheckBCD],[tempcheckBCD[i,:]]))
        if printflag:
            figure(fbcd)
            for i in arange(1,size(tocheckBCD,1)).reshape(-1):
                plot3(p[tocheckBCD[i,1],2],p[tocheckBCD[i,1],3],p[tocheckBCD[i,1],4],'gd','LineWidth',2)
                hold('on')
            fprintf('There are %d points to check\\n',size(tocheckBCD,1))
            pause

    
    #--------------------------------- HULL -----------------------------------
    
    hull=matlabarray([])
    for i in arange(1,size(indexhullABC,1)).reshape(-1):
        hull=matlabarray(cat([hull],[p[indexhullABC[i,1],:]]))
    
    for i in arange(1,size(indexhullABD,1)).reshape(-1):
        hull=matlabarray(cat([hull],[p[indexhullABD[i,1],:]]))
    
    for i in arange(1,size(indexhullCAD,1)).reshape(-1):
        hull=matlabarray(cat([hull],[p[indexhullCAD[i,1],:]]))
    
    for i in arange(1,size(indexhullBCD,1)).reshape(-1):
        hull=matlabarray(cat([hull],[p[indexhullBCD[i,1],:]]))
    
    hull,Ihull=mintournamenttree(hull,false,2,nargout=2)
    M=size(hull,1)
    edges=zeros(M,4)
    for i in arange(1,M).reshape(-1):
        ind1=0
        dist1=0
        ind2=0
        dist2=0
        ind3=0
        dist3=0
        for j in arange(4,M).reshape(-1):
            if j != i:
                distance=(hull[j,2] - hull[i,2]) ** 2 + (hull[j,3] - hull[i,3]) ** 2 + (hull[j,4] - hull[i,4]) ** 2
                if logical_not(ind1):
                    ind1=copy(j)
                    dist1=copy(distance)
                else:
                    if logical_not(ind2):
                        ind2=copy(j)
                        dist2=copy(distance)
                    else:
                        if logical_not(ind3):
                            ind3=copy(j)
                            dist3=copy(distance)
                        else:
                            if distance <= dist1:
                                ind3=copy(ind2)
                                ind2=copy(ind1)
                                ind1=copy(j)
                                dist3=copy(dist2)
                                dist2=copy(dist1)
                                dist1=copy(distance)
                            else:
                                if distance > dist1 and distance <= dist2:
                                    ind3=copy(ind2)
                                    ind2=copy(j)
                                    dist3=copy(dist2)
                                    dist2=copy(distance)
                                else:
                                    if distance > dist2 and distance <= dist3:
                                        ind3=copy(j)
                                        dist3=copy(distance)
        edges[i,1]=i
        edges[i,2]=ind1
        edges[i,3]=ind2
        edges[i,4]=ind3
    
    return hull,edges,A,B,C,D
# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def initializeDT2D(p=None,printflag=None,*args,**kwargs):
    varargin = initializeDT2D.varargin
    nargin = initializeDT2D.nargin

    ##
#        Project: Fluid-Structure Interaction on Deformable Surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: April 23rd, 2014
#    Last update: April 24th, 2014
    
    #          Input: N x 4 vector points in space (indices + coordinates)
#         Output: M x 1 vector of indeces of points belonging to the hull
    
    ## Initialize triangulation - Radial sweep
    
    #-------------------- Step 1
    
    N=size(p,1)
    sumx=0
    sumy=0
    for i in arange(1,N).reshape(-1):
        sumx=sumx + p[i,2]
        sumy=sumy + p[i,3]
    
    xm=sumx / N
    ym=sumy / N
    distances=zeros(N,1)
    for i in arange(1,N).reshape(-1):
        distances[i,1]=(p[i,2] - xm) ** 2 + (p[i,3] - ym) ** 2
    
    nearests,In=mintournamenttree(distances,false,1,nargout=2)
    nearest=p[In[1,1],:]
    clear('distances','nearests','In')
    edges=matlabarray([])
    it=1
    for i in arange(1,N).reshape(-1):
        if i != nearest[1,1]:
            edges=matlabarray(cat([edges],[it,nearest[1,1],p[i,1],(nearest[1,2] + p[i,2]) / 2(nearest[1,3] + p[i,3]) / 2,0,0]))
            it=it + 1
    
    if printflag:
        f1=copy(figure)
        plot(nearest[1,2],nearest[1,3],'rd','LineWidth',2)
        hold('on')
        for i in arange(1,N).reshape(-1):
            if i != nearest[1,1]:
                plot(p[i,2],p[i,3],'b*','LineWidth',2)
                hold('on')
        for i in arange(1,size(edges,1)).reshape(-1):
            plot(cat([p[edges[i,2],2]],[p[edges[i,3],2]]),cat([p[edges[i,2],3]],[p[edges[i,3],3]]),'k--')
            hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        title('Step 1: radiating edges from centroid nearest neighbour')
        pause
    
    #-------------------- Step 2
    
    prem=matlabarray(cat([p[1:nearest[1,1] - 1,:]],[p[nearest[1,1] + 1:end(),:]]))
    prem=matlabarray(cat(prem,zeros(N - 1,1),zeros(N - 1,1)))
    for i in arange(1,N - 1).reshape(-1):
        prem[i,4]=sqrt((prem[i,2] - nearest[1,2]) ** 2 + (prem[i,3] - nearest[1,3]) ** 2)
        if (prem[i,2] - nearest[1,2]) > 10 ** - 15:
            prem[i,5]=dot((180 / pi),atan((prem[i,3] - nearest[1,3]) / (prem[i,2] - nearest[1,2])))
        else:
            if (prem[i,2] - nearest[1,2]) < - 10 ** - 15:
                prem[i,5]=180 + dot((180 / pi),atan((prem[i,3] - nearest[1,3]) / (prem[i,2] - nearest[1,2])))
            else:
                if abs((prem[i,2] - nearest[1,2])) < 10 ** - 15 and (prem[i,3] - nearest[1,3]) > 10 ** - 15:
                    prem[i,5]=90
                else:
                    prem[i,5]=- 90
    
    prem,Ipr=mintournamenttree(prem,false,5,nargout=2)
    tempprem=copy(prem)
    prem=matlabarray([])
    it=1
    while it <= N - 1:

        count=0
        checknext=1
        while checknext and count <= N - 1 - it and it < N - 1:

            if tempprem[it + (count + 1),5] == tempprem[it,5]:
                count=count + 1
            else:
                checknext=0

        if count != 0:
            part,Ipar=mintournamenttree(tempprem[it:it + count,:],false,4,nargout=2)
            prem=matlabarray(cat([prem],[part]))
        else:
            prem=matlabarray(cat([prem],[tempprem[it,:]]))
        it=it + (count + 1)

    
    clear('tempprem')
    M=size(edges,1)
    for i in arange(1,N - 1).reshape(-1):
        if i == N - 1:
            edges=matlabarray(cat([edges],[M + i,prem[i,1],prem[1,1],(prem[i,2] + prem[1,2]) / 2(prem[i,3] + prem[1,3]) / 2,0,0]))
        else:
            edges=matlabarray(cat([edges],[M + i,prem[i,1],prem[i + 1,1],(prem[i,2] + prem[i + 1,2]) / 2(prem[i,3] + prem[i + 1,3]) / 2,0,0]))
    
    triangles=matlabarray([])
    for i in arange(1,N - 1).reshape(-1):
        if i == N - 1:
            triangles=matlabarray(cat([triangles],[i,1,1,i - 1(nearest[1,2] + prem[i,2] + prem[1,2]) / 3(nearest[1,3] + prem[i,3] + prem[1,3]) / 3,nearest[1,1],prem[i,1],prem[1,1],getedge_fromnodes2D(nearest[1,1],prem[i,1],edges),getedge_fromnodes2D(prem[i,1],prem[1,1],edges),getedge_fromnodes2D(nearest[1,1],prem[1,1],edges)]))
        else:
            if i == 1:
                triangles=matlabarray(cat([triangles],[i,i + 1,i + 1,N - 1(nearest[1,2] + prem[i,2] + prem[i + 1,2]) / 3(nearest[1,3] + prem[i,3] + prem[i + 1,3]) / 3,nearest[1,1],prem[i,1],prem[i + 1,1],getedge_fromnodes2D(nearest[1,1],prem[i,1],edges),getedge_fromnodes2D(prem[i,1],prem[i + 1,1],edges),getedge_fromnodes2D(nearest[1,1],prem[i + 1,1],edges)]))
            else:
                triangles=matlabarray(cat([triangles],[i,i + 1,i + 1,i - 1(nearest[1,2] + prem[i,2] + prem[i + 1,2]) / 3(nearest[1,3] + prem[i,3] + prem[i + 1,3]) / 3,nearest[1,1],prem[i,1],prem[i + 1,1],getedge_fromnodes2D(nearest[1,1],prem[i,1],edges),getedge_fromnodes2D(prem[i,1],prem[i + 1,1],edges),getedge_fromnodes2D(nearest[1,1],prem[i + 1,1],edges)]))
    
    if printflag:
        f2=copy(figure)
        plot(nearest[1,2],nearest[1,3],'rd','LineWidth',2)
        hold('on')
        text(nearest[1,2],nearest[1,3],num2str(nearest[1,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,1))
        hold('on')
        for i in arange(1,N).reshape(-1):
            if i != nearest[1,1]:
                plot(p[i,2],p[i,3],'b*','LineWidth',2)
                hold('on')
                text(p[i,2],p[i,3],num2str(p[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,1))
                hold('on')
        for i in arange(1,size(edges,1)).reshape(-1):
            plot(cat([p[edges[i,2],2]],[p[edges[i,3],2]]),cat([p[edges[i,2],3]],[p[edges[i,3],3]]),'k--')
            hold('on')
            text(edges[i,4],edges[i,5],num2str(edges[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,0))
            hold('on')
        for i in arange(1,size(triangles,1)).reshape(-1):
            text(triangles[i,5],triangles[i,6],num2str(triangles[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(1,0,0))
            hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        title('Step 2: star-shaped domain')
        pause
    
    #-------------------- Step 3
    
    hull,A,B,C,D=quickhull2D(p,false,nargout=5)
    hullsize=size(hull,1)
    clear('hull','A','B','C','D')
    i=1
    while logical_not(isempty(prem)):

        Aindex=rem(i,size(prem,1))
        Bindex=rem(i + 1,size(prem,1))
        Cindex=rem(i + 2,size(prem,1))
        if logical_not(Aindex):
            Aindex=size(prem,1)
        if logical_not(Bindex):
            Bindex=size(prem,1)
        if logical_not(Cindex):
            Cindex=size(prem,1)
        A=prem[Aindex,:]
        B=prem[Bindex,:]
        C=prem[Cindex,:]
        areaABC=orient2D(A[1,2:3].T,B[1,2:3].T,C[1,2:3].T)
        if areaABC < 0:
            edges=matlabarray(cat([edges],[edges[end(),1] + 1,A[1,1],B[1,1],(A[1,2] + B[1,2]) / 2(A[1,3] + B[1,3]) / 2,0,0],[edges[end(),1] + 2,A[1,1],C[1,1],(A[1,2] + C[1,2]) / 2(A[1,3] + C[1,3]) / 2,0,0],[edges[end(),1] + 3,B[1,1],C[1,1],(B[1,2] + C[1,2]) / 2(B[1,3] + C[1,3]) / 2,0,0]))
            triangles=matlabarray(cat([triangles],[triangles[end(),1] + 1,0,0,0(A[1,2] + B[1,2] + C[1,2]) / 3(A[1,3] + B[1,3] + C[1,3]) / 3,A[1,1],C[1,1],B[1,1],getedge_fromnodes2D(A[1,1],C[1,1],edges),getedge_fromnodes2D(C[1,1],B[1,1],edges),getedge_fromnodes2D(B[1,1],A[1,1],edges)]))
            prem=matlabarray(cat([prem[1:Bindex - 1,:]],[prem[Bindex + 1:end(),:]]))
        else:
            i=mod(i + 1,size(prem,1))
        if size(prem,1) == hullsize:
            prem=matlabarray([])

    
    for i in arange(1,size(edges,1)).reshape(-1):
        tri1,tri2=gettriangleadjacenttoedge2D(edges[i,:],triangles,nargout=2)
        edges[i,6]=tri1
        edges[i,7]=tri2
    
    for i in arange(1,size(triangles,1)).reshape(-1):
        tri1,tri2,tri3=gettriangleadjacenttotriangle2D(triangles[i,:],edges,triangles,nargout=3)
        triangles[i,2]=tri1
        triangles[i,3]=tri2
        triangles[i,4]=tri3
    
    if printflag:
        f3=copy(figure)
        plot(nearest[1,2],nearest[1,3],'rd','LineWidth',2)
        hold('on')
        text(nearest[1,2],nearest[1,3],num2str(nearest[1,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,1))
        hold('on')
        for i in arange(1,N).reshape(-1):
            if i != nearest[1,1]:
                plot(p[i,2],p[i,3],'b*','LineWidth',2)
                hold('on')
                text(p[i,2],p[i,3],num2str(p[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,1))
                hold('on')
        for i in arange(1,size(edges,1)).reshape(-1):
            plot(cat([p[edges[i,2],2]],[p[edges[i,3],2]]),cat([p[edges[i,2],3]],[p[edges[i,3],3]]),'k--')
            hold('on')
            text(edges[i,4],edges[i,5],num2str(edges[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(0,0,0))
            hold('on')
        for i in arange(1,size(triangles,1)).reshape(-1):
            text(triangles[i,5],triangles[i,6],num2str(triangles[i,1]),'VerticalAlignment','middle','HorizontalAlignment','left','FontSize',12,'Color',cat(1,0,0))
            hold('on')
        grid('on')
        xlabel('x')
        ylabel('y')
        title('Step 3: fill boundary')
        pause
    
    #-------------------- Step 4
    
    return edges,triangles
# Autogenerated with SMOP 
from smop.core import *
# 

    clear('all')
    close_('all')
    clc
    ##
    
    N=50
    x0=0
    y0=0
    r=10
    b=copy(r)
    e=(arange(0,0.3,0.01)).T
    colors=cellarray(['b.','g.','r.','c.','m.','y.','k.'])
    numcolor=length(colors)
    colorcount=1
    f0=copy(figure)
    grid('on')
    hold('on')
    xlabel('x')
    ylabel('y')
    title('Ellipse as a function of eccentricity')
    for i in arange(1,length(e)).reshape(-1):
        a=b / sqrt(1 - e[i] ** 2)
        ellipse=ellipse2D(a,b,x0,y0,N)
        plot(ellipse[:,1],ellipse[:,2],colors[colorcount])
        hold('on')
        if colorcount < numcolor:
            colorcount=colorcount + 1
        else:
            colorcount=1
    
    axis('equal')
    c=dot(e[end()],b) / sqrt(1 - e[end()] ** 2)
    center1=matlabarray(cat([dot(0.5,c),0],[dot(0.25,c),0],[c,0]))
    center2=matlabarray(cat([dot(- 0.5,c),0],[dot(- 0.25,c),0],[- c,0]))
    R1=b / sqrt(1 - e[end()] ** 2) - c
    R2=b / sqrt(1 - e[end()] ** 2) - c
    R3=dot(b,sqrt(1 - (c / (b / sqrt(1 - e[end()] ** 2))) ** 2))
    R4=dot(b,sqrt(1 - (c / (b / sqrt(1 - e[end()] ** 2))) ** 2))
    theta=(arange(0,dot(2,pi),dot(2,pi) / 100)).T
    f1=copy(figure)
    plot(dot(r,cos(theta)),dot(r,sin(theta)),'c*')
    hold('on')
    #plot(center1(1)+R1*cos(theta),center1(2)+R1*sin(theta),'b.')
#hold on
#plot(center2(1)+R2*cos(theta),center2(2)+R2*sin(theta),'b.')
#hold on
    for i in arange(1,size(center1,1)).reshape(-1):
        plot(center1[i,1] + dot(R3,cos(theta)),center1[i,2] + dot(R3,sin(theta)),colors[i])
        hold('on')
        plot(center2[i,1] + dot(R4,cos(theta)),center2[i,2] + dot(R4,sin(theta)),colors[i])
        hold('on')
        plot(center1[i,1],center1[i,2],'kx')
        hold('on')
        plot(center2[i,1],center2[i,2],'kx')
        hold('on')
    
    a=b / sqrt(1 - e[end()] ** 2)
    ellipse=ellipse2D(a,b,x0,y0,N)
    plot(ellipse[:,1],ellipse[:,2],'m.')
    hold('on')
    grid('on')
    xlabel('x')
    ylabel('y')
    title('Ellipse and circles')
    axis('equal')
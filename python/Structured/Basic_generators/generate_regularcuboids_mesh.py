# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def generate_regularcuboids_mesh(D=None,dim1min=None,dim1max=None,Ndim1=None,dim2min=None,dim2max=None,Ndim2=None,dim3min=None,dim3max=None,Ndim3=None,Nlinesdim1=None,Nlinesdim2=None,Nlinesdim3=None,edgeflag=None,faceflag=None,cellflag=None,printflag=None,*args,**kwargs):
    varargin = generate_regularcuboids_mesh.varargin
    nargin = generate_regularcuboids_mesh.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: March 27th, 2014
#    Last update: April 8th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    mesh.D = copy(D)
    mesh.dim1min = copy(dim1min)
    mesh.dim1max = copy(dim1max)
    mesh.Ndim1 = copy(Ndim1)
    mesh.dim2min = copy(dim2min)
    mesh.dim2max = copy(dim2max)
    mesh.Ndim2 = copy(Ndim2)
    mesh.dim3min = copy(dim3min)
    mesh.dim3max = copy(dim3max)
    mesh.Ndim3 = copy(Ndim3)
    mesh.Nlinesdim1 = copy(Nlinesdim1)
    mesh.Nlinesdim2 = copy(Nlinesdim2)
    mesh.Nlinesdim3 = copy(Nlinesdim3)
    mesh.totN = copy(dot(dot(Ndim1,Ndim2),Ndim3))
    mesh.totE = copy(0)
    mesh.totF = copy(0)
    mesh.totC = copy(0)
    mesh.edgeflag = copy(edgeflag)
    mesh.faceflag = copy(faceflag)
    mesh.cellflag = copy(cellflag)
    if 1 == D:
        c=copy(clock)
        if printflag:
            disp(strcat(cat(num2str(c[1]),'_',num2str(c[2]),'_',num2str(c[3]))))
            disp(' ')
            disp('MESH GENERATION')
            disp(' ')
            disp('Generation of equally spaced intervals along a line - 1D')
            fprintf('Start point x0 = %d\\n',mesh.dim1min)
            fprintf('End point xN = %6.2f\\n',mesh.dim1max)
            disp(' ')
            fprintf('Total number of nodes N = %6.2f\\n',mesh.totN)
        mesh.nodes.id = copy(zeros(1,mesh.totN))
        mesh.nodes.meshcoordinates = copy(zeros(3,mesh.totN))
        mesh.deltadim1 = copy((mesh.dim1max - mesh.dim1min) / (mesh.Ndim1 - 1))
        for i in arange(1,Ndim1).reshape(-1):
            mesh.nodes.meshcoordinates[1,i]=mesh.dim1min + dot(mesh.deltadim1,(i - 1))
            mesh.nodes.meshcoordinates[2,i]=0
            mesh.nodes.meshcoordinates[3,i]=0
            mesh.nodes.id[i]=i
        mesh.coordlines.dim1free = copy(zeros(mesh.Nlinesdim1,3))
        coord2=0
        coord3=0
        deltalinedim1=(mesh.dim1max - mesh.dim1min) / (mesh.Nlinesdim1 - 1)
        for l in arange(1,mesh.Nlinesdim1).reshape(-1):
            mesh.coordlines.dim1free[l,1]=mesh.dim1min + dot(deltalinedim1,(l - 1))
            mesh.coordlines.dim1free[l,2]=coord2
            mesh.coordlines.dim1free[l,3]=coord3
        if edgeflag or faceflag or cellflag:
            mesh.edgeflag = copy(1)
            mesh.edgespernode = copy(2)
            mesh.nodesperedge = copy(2)
            mesh.totE = copy((mesh.Ndim1 - 1))
            mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
            mesh.edges.id = copy(zeros(1,mesh.totE))
            mesh.edges.centroid = copy(zeros(3,mesh.totE))
            mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
            if printflag:
                fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
            for i in arange(1,mesh.Ndim1 - 1).reshape(-1):
                nodeindex1=copy(i)
                nodeindex2=i + 1
                edgeindex1=copy(i)
                mesh.nodes.edges[2,nodeindex1]=edgeindex1
                mesh.nodes.edges[1,nodeindex2]=edgeindex1
                mesh.edges.id[i]=edgeindex1
                mesh.edges.centroid[1,i]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                mesh.edges.centroid[2,i]=0
                mesh.edges.centroid[3,i]=0
                mesh.edges.nodes[1,i]=nodeindex1
                mesh.edges.nodes[2,i]=nodeindex2
        #-----------------------------------------------------------------------------2D--------------------------------------------------------------------------------------------
    else:
        if 2 == D:
            c=copy(clock)
            if printflag:
                disp(strcat(cat(num2str(c[1]),'_',num2str(c[2]),'_',num2str(c[3]))))
                disp(' ')
                disp('MESH GENERATION')
                disp(' ')
                disp('Meshing of a rectangular domain with quadrilateral elements - 2D')
                fprintf('Lower boundary along the first direction x0 = %d\\n',mesh.dim1min)
                fprintf('Upper boundary along the first direction xN = %6.2f\\n',mesh.dim1max)
                fprintf('Lower boundary along the second direction y0 = %d\\n',mesh.dim2min)
                fprintf('Upper boundary along the second direction yN = %6.2f\\n',mesh.dim2max)
                disp(' ')
                fprintf('Total number of nodes N = %6.2f\\n',mesh.totN)
            mesh.nodes.id = copy(zeros(1,mesh.totN))
            mesh.nodes.meshcoordinates = copy(zeros(3,mesh.totN))
            mesh.deltadim1 = copy((mesh.dim1max - mesh.dim1min) / (mesh.Ndim1 - 1))
            mesh.deltadim2 = copy((mesh.dim2max - mesh.dim2min) / (mesh.Ndim2 - 1))
            for i in arange(1,Ndim2).reshape(-1):
                for j in arange(1,Ndim1).reshape(-1):
                    mesh.nodes.meshcoordinates[1,j + dot((i - 1),Ndim1)]=mesh.dim1min + dot(mesh.deltadim1,(j - 1))
                    mesh.nodes.meshcoordinates[2,j + dot((i - 1),Ndim1)]=mesh.dim2min + dot(mesh.deltadim2,(i - 1))
                    mesh.nodes.meshcoordinates[3,j + dot((i - 1),Ndim1)]=0
                    mesh.nodes.id[j + dot(i,Ndim1)]=j + dot((i - 1),Ndim1)
            mesh.coordlines.dim1free = copy(zeros(mesh.Nlinesdim1,dot(3,mesh.Ndim2)))
            mesh.coordlines.dim2free = copy(zeros(mesh.Nlinesdim2,dot(3,mesh.Ndim1)))
            for j in arange(1,mesh.Ndim2).reshape(-1):
                coord2=mesh.dim2min + dot(mesh.deltadim2,(j - 1))
                coord3=0
                deltalinedim1=(mesh.dim1max - mesh.dim1min) / (mesh.Nlinesdim1 - 1)
                for l in arange(1,mesh.Nlinesdim1).reshape(-1):
                    mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 1]=mesh.dim1min + dot(deltalinedim1,(l - 1))
                    mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 2]=coord2
                    mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 3]=coord3
            for k in arange(1,mesh.Ndim1).reshape(-1):
                coord1=mesh.dim1min + dot(mesh.deltadim1,(k - 1))
                coord3=0
                deltalinedim2=(mesh.dim2max - mesh.dim2min) / (mesh.Nlinesdim2 - 1)
                for l in arange(1,mesh.Nlinesdim2).reshape(-1):
                    mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 1]=coord1
                    mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 2]=mesh.dim2min + dot(deltalinedim2,(l - 1))
                    mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 3]=coord3
            if (edgeflag and faceflag) or (edgeflag and cellflag):
                mesh.edgeflag = copy(1)
                mesh.faceflag = copy(1)
                mesh.totE = copy(dot((mesh.Ndim1 - 1),mesh.Ndim2) + dot((mesh.Ndim2 - 1),mesh.Ndim1))
                mesh.totF = copy(dot((mesh.Ndim1 - 1),(mesh.Ndim2 - 1)))
                if printflag:
                    fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
                    fprintf('Total number of faces F = %6.2f\\n',mesh.totF)
                    disp(' ')
                mesh.nodesperedge = copy(2)
                mesh.nodesperface = copy(4)
                mesh.edgespernode = copy(4)
                mesh.edgesperface = copy(4)
                mesh.facespernode = copy(4)
                mesh.facesperedge = copy(2)
                mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
                mesh.nodes.faces = copy(zeros(mesh.facespernode,mesh.totN))
                mesh.edges.id = copy(zeros(1,mesh.totE))
                mesh.edges.centroid = copy(zeros(3,mesh.totE))
                mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
                mesh.edges.faces = copy(zeros(mesh.facesperedge,mesh.totE))
                mesh.faces.id = copy(zeros(1,mesh.totF))
                mesh.faces.centroid = copy(zeros(3,mesh.totF))
                mesh.faces.nodes = copy(zeros(mesh.nodesperface,mesh.totF))
                mesh.faces.edges = copy(zeros(mesh.edgesperface,mesh.totF))
                for j in arange(1,Ndim2).reshape(-1):
                    for k in arange(1,Ndim1 - 1).reshape(-1):
                        nodeindex1=k + dot((j - 1),Ndim1)
                        nodeindex2=k + dot((j - 1),Ndim1) + 1
                        edgeindex1=k + dot((j - 1),(Ndim1 - 1))
                        mesh.edges.nodes[1,edgeindex1]=nodeindex1
                        mesh.edges.nodes[2,edgeindex1]=nodeindex2
                        mesh.nodes.edges[1,nodeindex1]=edgeindex1
                        mesh.nodes.edges[3,nodeindex2]=edgeindex1
                        mesh.edges.id[edgeindex1]=edgeindex1
                        mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                        mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                        mesh.edges.centroid[3,edgeindex1]=0
                for j in arange(1,Ndim2 - 1).reshape(-1):
                    for k in arange(1,Ndim1).reshape(-1):
                        nodeindex1=k + dot((j - 1),Ndim1)
                        nodeindex2=k + dot((j - 1),Ndim1) + Ndim1
                        edgeindex1=dot((Ndim1 - 1),Ndim2) + k + dot((j - 1),Ndim1)
                        mesh.edges.nodes[1,edgeindex1]=nodeindex1
                        mesh.edges.nodes[2,edgeindex1]=nodeindex2
                        mesh.nodes.edges[2,nodeindex1]=edgeindex1
                        mesh.nodes.edges[4,nodeindex2]=edgeindex1
                        mesh.edges.id[edgeindex1]=edgeindex1
                        mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                        mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                        mesh.edges.centroid[3,edgeindex1]=0
                ##----------------------------------------------------- mesh faces ------------------------------------------------------------------------------------------------
                for j in arange(1,Ndim2 - 1).reshape(-1):
                    for k in arange(1,Ndim1 - 1).reshape(-1):
                        nodeindex1=k + dot((j - 1),Ndim1)
                        nodeindex2=k + dot((j - 1),Ndim1) + Ndim1
                        nodeindex3=k + dot((j - 1),Ndim1) + Ndim1 + 1
                        nodeindex4=k + dot((j - 1),Ndim1) + 1
                        edgeindex1=k + dot((j - 1),(Ndim1 - 1))
                        edgeindex2=dot((Ndim1 - 1),Ndim2) + k + dot((j - 1),Ndim1)
                        edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + (Ndim1 - 1)
                        edgeindex4=dot((Ndim1 - 1),Ndim2) + k + dot((j - 1),Ndim1) + 1
                        faceindex1=k + dot((j - 1),(Ndim1 - 1))
                        mesh.faces.nodes[1,faceindex1]=nodeindex1
                        mesh.faces.nodes[2,faceindex1]=nodeindex4
                        mesh.faces.nodes[3,faceindex1]=nodeindex3
                        mesh.faces.nodes[4,faceindex1]=nodeindex2
                        mesh.nodes.faces[1,nodeindex1]=faceindex1
                        mesh.nodes.faces[4,nodeindex2]=faceindex1
                        mesh.nodes.faces[3,nodeindex3]=faceindex1
                        mesh.nodes.faces[2,nodeindex4]=faceindex1
                        mesh.faces.id[faceindex1]=faceindex1
                        mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                        mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                        mesh.faces.centroid[3,faceindex1]=0
                        mesh.faces.edges[1,faceindex1]=edgeindex1
                        mesh.faces.edges[2,faceindex1]=edgeindex2
                        mesh.faces.edges[3,faceindex1]=edgeindex3
                        mesh.faces.edges[4,faceindex1]=edgeindex4
                        mesh.edges.faces[1,edgeindex1]=faceindex1
                        mesh.edges.faces[1,edgeindex2]=faceindex1
                        mesh.edges.faces[2,edgeindex3]=faceindex1
                        mesh.edges.faces[2,edgeindex4]=faceindex1
            else:
                if edgeflag:
                    mesh.edgeflag = copy(1)
                    mesh.totE = copy(dot((mesh.Ndim1 - 1),mesh.Ndim2) + dot((mesh.Ndim2 - 1),mesh.Ndim1))
                    if printflag:
                        fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
                        disp(' ')
                    mesh.nodesperedge = copy(2)
                    mesh.edgespernode = copy(4)
                    mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
                    mesh.edges.id = copy(zeros(1,mesh.totE))
                    mesh.edges.centroid = copy(zeros(3,mesh.totE))
                    mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
                    for j in arange(1,Ndim2).reshape(-1):
                        for k in arange(1,Ndim1 - 1).reshape(-1):
                            nodeindex1=k + dot((j - 1),Ndim1)
                            nodeindex2=k + dot((j - 1),Ndim1) + 1
                            edgeindex1=k + dot((j - 1),(Ndim1 - 1))
                            mesh.edges.nodes[1,edgeindex1]=nodeindex1
                            mesh.edges.nodes[2,edgeindex1]=nodeindex2
                            mesh.nodes.edges[1,nodeindex1]=edgeindex1
                            mesh.nodes.edges[3,nodeindex2]=edgeindex1
                            mesh.edges.id[edgeindex1]=edgeindex1
                            mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                            mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                            mesh.edges.centroid[3,edgeindex1]=0
                    for j in arange(1,Ndim2 - 1).reshape(-1):
                        for k in arange(1,Ndim1).reshape(-1):
                            nodeindex1=k + dot((j - 1),Ndim1)
                            nodeindex2=k + dot((j - 1),Ndim1) + Ndim1
                            edgeindex1=dot((Ndim1 - 1),Ndim2) + k + dot((j - 1),Ndim1)
                            mesh.edges.nodes[1,edgeindex1]=nodeindex1
                            mesh.edges.nodes[2,edgeindex1]=nodeindex2
                            mesh.nodes.edges[2,nodeindex1]=edgeindex1
                            mesh.nodes.edges[4,nodeindex2]=edgeindex1
                            mesh.edges.id[edgeindex1]=edgeindex1
                            mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                            mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                            mesh.edges.centroid[3,edgeindex1]=0
            #-----------------------------------------------------------------------------3D--------------------------------------------------------------------------------------------
        else:
            if 3 == D:
                c=copy(clock)
                if printflag:
                    disp(strcat(cat(num2str(c[1]),'_',num2str(c[2]),'_',num2str(c[3]))))
                    disp(' ')
                    disp('MESH GENERATION')
                    disp(' ')
                    disp('Meshing of a cuboid with brick elements - 3D')
                    disp(' ')
                    fprintf('Lower boundary along the first direction x0 = %d\\n',mesh.dim1min)
                    fprintf('Upper boundary along the first direction xN = %6.2f\\n',mesh.dim1max)
                    fprintf('Lower boundary along the second direction y0 = %d\\n',mesh.dim2min)
                    fprintf('Upper boundary along the second direction yN = %6.2f\\n',mesh.dim2max)
                    fprintf('Lower boundary along the second direction z0 = %d\\n',mesh.dim3min)
                    fprintf('Upper boundary along the second direction zN = %6.2f\\n',mesh.dim3max)
                    disp(' ')
                    fprintf('Total number of nodes N = %6.2f\\n',mesh.totN)
                mesh.nodes.id = copy(zeros(1,mesh.totN))
                mesh.nodes.meshcoordinates = copy(zeros(3,mesh.totN))
                mesh.deltadim1 = copy((mesh.dim1max - mesh.dim1min) / (mesh.Ndim1 - 1))
                mesh.deltadim2 = copy((mesh.dim2max - mesh.dim2min) / (mesh.Ndim2 - 1))
                mesh.deltadim3 = copy((mesh.dim3max - mesh.dim3min) / (mesh.Ndim3 - 1))
                for i in arange(1,mesh.Ndim3).reshape(-1):
                    for j in arange(1,mesh.Ndim2).reshape(-1):
                        for k in arange(1,mesh.Ndim1).reshape(-1):
                            mesh.nodes.meshcoordinates[1,k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)]=mesh.dim1min + dot(mesh.deltadim1,(k - 1))
                            mesh.nodes.meshcoordinates[2,k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)]=mesh.dim2min + dot(mesh.deltadim2,(j - 1))
                            mesh.nodes.meshcoordinates[3,k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)]=mesh.dim3min + dot(mesh.deltadim3,(i - 1))
                            mesh.nodes.id[k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)]=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)
                mesh.coordlines.dim1free = copy(zeros(mesh.Nlinesdim1,dot(dot(3,mesh.Ndim2),mesh.Ndim3)))
                mesh.coordlines.dim2free = copy(zeros(mesh.Nlinesdim2,dot(dot(3,mesh.Ndim1),mesh.Ndim3)))
                mesh.coordlines.dim3free = copy(zeros(mesh.Nlinesdim3,dot(dot(3,mesh.Ndim1),mesh.Ndim2)))
                for i in arange(1,mesh.Ndim3).reshape(-1):
                    for j in arange(1,mesh.Ndim2).reshape(-1):
                        coord2=mesh.dim2min + dot(mesh.deltadim2,(j - 1))
                        coord3=mesh.dim3min + dot(mesh.deltadim3,(i - 1))
                        deltalinedim1=(mesh.dim1max - mesh.dim1min) / (mesh.Nlinesdim1 - 1)
                        for l in arange(1,mesh.Nlinesdim1).reshape(-1):
                            mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 1]=mesh.dim1min + dot(deltalinedim1,(l - 1))
                            mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 2]=coord2
                            mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 3]=coord3
                for i in arange(1,mesh.Ndim3).reshape(-1):
                    for k in arange(1,mesh.Ndim1).reshape(-1):
                        coord1=mesh.dim1min + dot(mesh.deltadim1,(k - 1))
                        coord3=mesh.dim3min + dot(mesh.deltadim3,(i - 1))
                        deltalinedim2=(mesh.dim2max - mesh.dim2min) / (mesh.Nlinesdim2 - 1)
                        for l in arange(1,mesh.Nlinesdim2).reshape(-1):
                            mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 1]=coord1
                            mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 2]=mesh.dim2min + dot(deltalinedim2,(l - 1))
                            mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 3]=coord3
                for j in arange(1,mesh.Ndim2).reshape(-1):
                    for k in arange(1,mesh.Ndim1).reshape(-1):
                        coord1=mesh.dim1min + dot(mesh.deltadim1,(k - 1))
                        coord2=mesh.dim2min + dot(mesh.deltadim2,(j - 1))
                        deltalinedim3=(mesh.dim3max - mesh.dim3min) / (mesh.Nlinesdim3 - 1)
                        for l in arange(1,mesh.Nlinesdim3).reshape(-1):
                            mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 1]=coord1
                            mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 2]=coord2
                            mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 3]=mesh.dim3min + dot(deltalinedim3,(l - 1))
                if (edgeflag and faceflag and cellflag):
                    mesh.edgeflag = copy(1)
                    mesh.faceflag = copy(1)
                    mesh.cellflag = copy(1)
                    mesh.totE = copy(dot(dot((mesh.Ndim1 - 1),mesh.Ndim2),mesh.Ndim3) + dot(dot((mesh.Ndim2 - 1),mesh.Ndim1),mesh.Ndim3) + dot(dot((mesh.Ndim3 - 1),mesh.Ndim1),mesh.Ndim2))
                    mesh.totF = copy(dot(dot((mesh.Ndim1 - 1),(mesh.Ndim2 - 1)),mesh.Ndim3) + dot(dot((mesh.Ndim2 - 1),(mesh.Ndim3 - 1)),mesh.Ndim1) + dot(dot((mesh.Ndim1 - 1),(mesh.Ndim3 - 1)),mesh.Ndim2))
                    mesh.totC = copy(dot(dot((mesh.Ndim1 - 1),(mesh.Ndim2 - 1)),(mesh.Ndim3 - 1)))
                    if printflag:
                        fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
                        fprintf('Total number of faces F = %6.2f\\n',mesh.totF)
                        fprintf('Total number of cells C = %6.2f\\n',mesh.totC)
                        disp(' ')
                    mesh.nodesperedge = copy(2)
                    mesh.nodesperface = copy(4)
                    mesh.nodespercell = copy(8)
                    mesh.edgespernode = copy(6)
                    mesh.edgesperface = copy(4)
                    mesh.edgespercell = copy(12)
                    mesh.facespernode = copy(12)
                    mesh.facesperedge = copy(4)
                    mesh.facespercell = copy(6)
                    mesh.cellspernode = copy(8)
                    mesh.cellsperedge = copy(4)
                    mesh.cellsperface = copy(2)
                    mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
                    mesh.nodes.faces = copy(zeros(mesh.facespernode,mesh.totN))
                    mesh.nodes.cells = copy(zeros(mesh.cellspernode,mesh.totN))
                    mesh.edges.id = copy(zeros(1,mesh.totE))
                    mesh.edges.centroid = copy(zeros(3,mesh.totE))
                    mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
                    mesh.edges.faces = copy(zeros(mesh.facesperedge,mesh.totE))
                    mesh.edges.cells = copy(zeros(mesh.cellsperedge,mesh.totE))
                    mesh.faces.id = copy(zeros(1,mesh.totF))
                    mesh.faces.centroid = copy(zeros(3,mesh.totF))
                    mesh.faces.nodes = copy(zeros(mesh.nodesperface,mesh.totF))
                    mesh.faces.edges = copy(zeros(mesh.edgesperface,mesh.totF))
                    mesh.faces.cells = copy(zeros(mesh.cellsperface,mesh.totF))
                    mesh.cells.id = copy(zeros(1,mesh.totC))
                    mesh.cells.centroid = copy(zeros(3,mesh.totC))
                    mesh.cells.nodes = copy(zeros(mesh.nodespercell,mesh.totC))
                    mesh.cells.edges = copy(zeros(mesh.edgespercell,mesh.totC))
                    mesh.cells.faces = copy(zeros(mesh.facespercell,mesh.totC))
                    for i in arange(1,mesh.Ndim3).reshape(-1):
                        for j in arange(1,mesh.Ndim2).reshape(-1):
                            for k in arange(1,mesh.Ndim1 - 1).reshape(-1):
                                nodeindex1=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)
                                nodeindex2=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2) + 1
                                edgeindex1=k + dot((j - 1),(mesh.Ndim1 - 1)) + dot(dot((i - 1),(mesh.Ndim1 - 1)),mesh.Ndim2)
                                mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                mesh.nodes.edges[2,nodeindex1]=edgeindex1
                                mesh.nodes.edges[1,nodeindex2]=edgeindex1
                                mesh.edges.id[edgeindex1]=edgeindex1
                                mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                    for i in arange(1,Ndim3).reshape(-1):
                        for j in arange(1,Ndim2 - 1).reshape(-1):
                            for k in arange(1,Ndim1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                mesh.nodes.edges[4,nodeindex1]=edgeindex1
                                mesh.nodes.edges[3,nodeindex2]=edgeindex1
                                mesh.edges.id[edgeindex1]=edgeindex1
                                mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                    for i in arange(1,Ndim3 - 1).reshape(-1):
                        for j in arange(1,Ndim2).reshape(-1):
                            for k in arange(1,Ndim1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                mesh.nodes.edges[6,nodeindex1]=edgeindex1
                                mesh.nodes.edges[5,nodeindex2]=edgeindex1
                                mesh.edges.id[edgeindex1]=edgeindex1
                                mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                    #-------------------------------------->faces
                    for i in arange(1,Ndim3).reshape(-1):
                        for j in arange(1,Ndim2 - 1).reshape(-1):
                            for k in arange(1,Ndim1 - 1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1 + 1
                                nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + (Ndim1 - 1)
                                edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + 1
                                faceindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),(Ndim2 - 1))
                                mesh.faces.nodes[1,faceindex1]=nodeindex1
                                mesh.faces.nodes[2,faceindex1]=nodeindex4
                                mesh.faces.nodes[3,faceindex1]=nodeindex3
                                mesh.faces.nodes[4,faceindex1]=nodeindex2
                                mesh.nodes.faces[1,nodeindex1]=faceindex1
                                mesh.nodes.faces[4,nodeindex2]=faceindex1
                                mesh.nodes.faces[3,nodeindex3]=faceindex1
                                mesh.nodes.faces[2,nodeindex4]=faceindex1
                                mesh.faces.id[faceindex1]=faceindex1
                                mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                mesh.faces.edges[1,faceindex1]=edgeindex1
                                mesh.faces.edges[2,faceindex1]=edgeindex2
                                mesh.faces.edges[3,faceindex1]=edgeindex3
                                mesh.faces.edges[4,faceindex1]=edgeindex4
                                mesh.edges.faces[1,edgeindex1]=faceindex1
                                mesh.edges.faces[1,edgeindex2]=faceindex1
                                mesh.edges.faces[2,edgeindex3]=faceindex1
                                mesh.edges.faces[2,edgeindex4]=faceindex1
                    for i in arange(1,Ndim3 - 1).reshape(-1):
                        for j in arange(1,Ndim2).reshape(-1):
                            for k in arange(1,Ndim1 - 1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + 1
                                nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + dot((Ndim1 - 1),Ndim2)
                                edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                faceindex1=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                mesh.faces.nodes[1,faceindex1]=nodeindex1
                                mesh.faces.nodes[2,faceindex1]=nodeindex4
                                mesh.faces.nodes[3,faceindex1]=nodeindex3
                                mesh.faces.nodes[4,faceindex1]=nodeindex2
                                mesh.nodes.faces[5,nodeindex1]=faceindex1
                                mesh.nodes.faces[8,nodeindex2]=faceindex1
                                mesh.nodes.faces[7,nodeindex3]=faceindex1
                                mesh.nodes.faces[6,nodeindex4]=faceindex1
                                mesh.faces.id[faceindex1]=faceindex1
                                mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                mesh.faces.edges[1,faceindex1]=edgeindex1
                                mesh.faces.edges[2,faceindex1]=edgeindex2
                                mesh.faces.edges[3,faceindex1]=edgeindex3
                                mesh.faces.edges[4,faceindex1]=edgeindex4
                                mesh.edges.faces[3,edgeindex1]=faceindex1
                                mesh.edges.faces[1,edgeindex2]=faceindex1
                                mesh.edges.faces[4,edgeindex3]=faceindex1
                                mesh.edges.faces[2,edgeindex4]=faceindex1
                    for i in arange(1,Ndim3 - 1).reshape(-1):
                        for j in arange(1,Ndim2 - 1).reshape(-1):
                            for k in arange(1,Ndim1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + Ndim1
                                nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                edgeindex3=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + dot(Ndim1,(Ndim2 - 1))
                                edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                faceindex1=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + dot(dot((Ndim1 - 1),(Ndim3 - 1)),Ndim2) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                mesh.faces.nodes[1,faceindex1]=nodeindex1
                                mesh.faces.nodes[2,faceindex1]=nodeindex4
                                mesh.faces.nodes[3,faceindex1]=nodeindex3
                                mesh.faces.nodes[4,faceindex1]=nodeindex2
                                mesh.nodes.faces[9,nodeindex1]=faceindex1
                                mesh.nodes.faces[12,nodeindex2]=faceindex1
                                mesh.nodes.faces[11,nodeindex3]=faceindex1
                                mesh.nodes.faces[10,nodeindex4]=faceindex1
                                mesh.faces.id[faceindex1]=faceindex1
                                mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                mesh.faces.edges[1,faceindex1]=edgeindex1
                                mesh.faces.edges[2,faceindex1]=edgeindex2
                                mesh.faces.edges[3,faceindex1]=edgeindex3
                                mesh.faces.edges[4,faceindex1]=edgeindex4
                                mesh.edges.faces[3,edgeindex1]=faceindex1
                                mesh.edges.faces[3,edgeindex2]=faceindex1
                                mesh.edges.faces[4,edgeindex3]=faceindex1
                                mesh.edges.faces[4,edgeindex4]=faceindex1
                    #-------------------------------------->cells
                    for i in arange(1,Ndim3 - 1).reshape(-1):
                        for j in arange(1,Ndim2 - 1).reshape(-1):
                            for k in arange(1,Ndim1 - 1).reshape(-1):
                                nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1 + 1
                                nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                nodeindex5=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                nodeindex6=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + Ndim1
                                nodeindex7=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + Ndim1 + 1
                                nodeindex8=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + 1
                                edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + (Ndim1 - 1)
                                edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + 1
                                edgeindex5=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                edgeindex6=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                edgeindex7=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1 + 1
                                edgeindex8=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                edgeindex9=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + dot((Ndim1 - 1),Ndim2)
                                edgeindex10=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + dot(Ndim1,(Ndim2 - 1))
                                edgeindex11=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + (Ndim1 - 1) + dot((Ndim1 - 1),Ndim2)
                                edgeindex12=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + 1 + dot(Ndim1,(Ndim2 - 1))
                                faceindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),(Ndim2 - 1))
                                faceindex2=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                faceindex3=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + dot(dot((Ndim1 - 1),(Ndim3 - 1)),Ndim2) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                faceindex4=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + (Ndim1 - 1)
                                faceindex5=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + dot(dot((Ndim1 - 1),(Ndim3 - 1)),Ndim2) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + 1
                                faceindex6=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),(Ndim2 - 1)) + dot((Ndim1 - 1),(Ndim2 - 1))
                                cellindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),(Ndim2 - 1))
                                mesh.cells.nodes[1,cellindex1]=nodeindex1
                                mesh.cells.nodes[2,cellindex1]=nodeindex4
                                mesh.cells.nodes[3,cellindex1]=nodeindex3
                                mesh.cells.nodes[4,cellindex1]=nodeindex2
                                mesh.cells.nodes[5,cellindex1]=nodeindex5
                                mesh.cells.nodes[6,cellindex1]=nodeindex8
                                mesh.cells.nodes[7,cellindex1]=nodeindex7
                                mesh.cells.nodes[8,cellindex1]=nodeindex6
                                mesh.nodes.cells[1,nodeindex1]=cellindex1
                                mesh.nodes.cells[4,nodeindex2]=cellindex1
                                mesh.nodes.cells[3,nodeindex3]=cellindex1
                                mesh.nodes.cells[2,nodeindex4]=cellindex1
                                mesh.nodes.cells[5,nodeindex5]=cellindex1
                                mesh.nodes.cells[8,nodeindex6]=cellindex1
                                mesh.nodes.cells[7,nodeindex7]=cellindex1
                                mesh.nodes.cells[6,nodeindex8]=cellindex1
                                mesh.cells.id[cellindex1]=cellindex1
                                mesh.cells.centroid[1,cellindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4) + mesh.nodes.meshcoordinates(1,nodeindex5) + mesh.nodes.meshcoordinates(1,nodeindex6) + mesh.nodes.meshcoordinates(1,nodeindex7) + mesh.nodes.meshcoordinates(1,nodeindex8)) / 8
                                mesh.cells.centroid[2,cellindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4) + mesh.nodes.meshcoordinates(2,nodeindex5) + mesh.nodes.meshcoordinates(2,nodeindex6) + mesh.nodes.meshcoordinates(2,nodeindex7) + mesh.nodes.meshcoordinates(2,nodeindex8)) / 8
                                mesh.cells.centroid[3,cellindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4) + mesh.nodes.meshcoordinates(3,nodeindex5) + mesh.nodes.meshcoordinates(3,nodeindex6) + mesh.nodes.meshcoordinates(3,nodeindex7) + mesh.nodes.meshcoordinates(3,nodeindex8)) / 8
                                mesh.cells.edges[1,cellindex1]=edgeindex1
                                mesh.cells.edges[2,cellindex1]=edgeindex2
                                mesh.cells.edges[3,cellindex1]=edgeindex3
                                mesh.cells.edges[4,cellindex1]=edgeindex4
                                mesh.cells.edges[5,cellindex1]=edgeindex5
                                mesh.cells.edges[6,cellindex1]=edgeindex6
                                mesh.cells.edges[7,cellindex1]=edgeindex7
                                mesh.cells.edges[8,cellindex1]=edgeindex8
                                mesh.cells.edges[9,cellindex1]=edgeindex9
                                mesh.cells.edges[10,cellindex1]=edgeindex10
                                mesh.cells.edges[11,cellindex1]=edgeindex11
                                mesh.cells.edges[12,cellindex1]=edgeindex12
                                mesh.edges.cells[1,edgeindex1]=cellindex1
                                mesh.edges.cells[1,edgeindex2]=cellindex1
                                mesh.edges.cells[2,edgeindex3]=cellindex1
                                mesh.edges.cells[2,edgeindex4]=cellindex1
                                mesh.edges.cells[1,edgeindex5]=cellindex1
                                mesh.edges.cells[4,edgeindex6]=cellindex1
                                mesh.edges.cells[3,edgeindex7]=cellindex1
                                mesh.edges.cells[2,edgeindex8]=cellindex1
                                mesh.edges.cells[4,edgeindex9]=cellindex1
                                mesh.edges.cells[4,edgeindex10]=cellindex1
                                mesh.edges.cells[3,edgeindex11]=cellindex1
                                mesh.edges.cells[3,edgeindex12]=cellindex1
                                mesh.cells.faces[1,cellindex1]=faceindex1
                                mesh.cells.faces[2,cellindex1]=faceindex2
                                mesh.cells.faces[3,cellindex1]=faceindex3
                                mesh.cells.faces[4,cellindex1]=faceindex4
                                mesh.cells.faces[5,cellindex1]=faceindex5
                                mesh.cells.faces[6,cellindex1]=faceindex6
                                mesh.faces.cells[1,faceindex1]=cellindex1
                                mesh.faces.cells[1,faceindex2]=cellindex1
                                mesh.faces.cells[1,faceindex3]=cellindex1
                                mesh.faces.cells[2,faceindex4]=cellindex1
                                mesh.faces.cells[2,faceindex5]=cellindex1
                                mesh.faces.cells[2,faceindex6]=cellindex1
                else:
                    if (edgeflag and faceflag):
                        mesh.edgeflag = copy(1)
                        mesh.faceflag = copy(1)
                        mesh.totE = copy(dot(dot((mesh.Ndim1 - 1),mesh.Ndim2),mesh.Ndim3) + dot(dot((mesh.Ndim2 - 1),mesh.Ndim1),mesh.Ndim3) + dot(dot((mesh.Ndim3 - 1),mesh.Ndim1),mesh.Ndim2))
                        mesh.totF = copy(dot(dot((mesh.Ndim1 - 1),(mesh.Ndim2 - 1)),mesh.Ndim3) + dot(dot((mesh.Ndim2 - 1),(mesh.Ndim3 - 1)),mesh.Ndim1) + dot(dot((mesh.Ndim1 - 1),(mesh.Ndim3 - 1)),mesh.Ndim2))
                        if printflag:
                            fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
                            fprintf('Total number of faces F = %6.2f\\n',mesh.totF)
                            disp(' ')
                        mesh.nodesperedge = copy(2)
                        mesh.nodesperface = copy(4)
                        mesh.edgespernode = copy(6)
                        mesh.edgesperface = copy(4)
                        mesh.facespernode = copy(12)
                        mesh.facesperedge = copy(4)
                        mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
                        mesh.nodes.faces = copy(zeros(mesh.facespernode,mesh.totN))
                        mesh.edges.id = copy(zeros(1,mesh.totE))
                        mesh.edges.centroid = copy(zeros(3,mesh.totE))
                        mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
                        mesh.edges.faces = copy(zeros(mesh.facesperedge,mesh.totE))
                        mesh.faces.id = copy(zeros(1,mesh.totF))
                        mesh.faces.centroid = copy(zeros(3,mesh.totF))
                        mesh.faces.nodes = copy(zeros(mesh.nodesperface,mesh.totF))
                        mesh.faces.edges = copy(zeros(mesh.edgesperface,mesh.totF))
                        for i in arange(1,Ndim3).reshape(-1):
                            for j in arange(1,Ndim2).reshape(-1):
                                for k in arange(1,Ndim1 - 1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                    edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                    mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                    mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                    mesh.nodes.edges[2,nodeindex1]=edgeindex1
                                    mesh.nodes.edges[1,nodeindex2]=edgeindex1
                                    mesh.edges.id[edgeindex1]=edgeindex1
                                    mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                    mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                    mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                        for i in arange(1,Ndim3).reshape(-1):
                            for j in arange(1,Ndim2 - 1).reshape(-1):
                                for k in arange(1,Ndim1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                    edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                    mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                    mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                    mesh.nodes.edges[4,nodeindex1]=edgeindex1
                                    mesh.nodes.edges[3,nodeindex2]=edgeindex1
                                    mesh.edges.id[edgeindex1]=edgeindex1
                                    mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                    mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                    mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                        for i in arange(1,Ndim3 - 1).reshape(-1):
                            for j in arange(1,Ndim2).reshape(-1):
                                for k in arange(1,Ndim1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                    edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                    mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                    mesh.nodes.edges[6,nodeindex1]=edgeindex1
                                    mesh.nodes.edges[5,nodeindex2]=edgeindex1
                                    mesh.edges.id[edgeindex1]=edgeindex1
                                    mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                    mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                    mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                        #-------------------------------------->faces
                        for i in arange(1,mesh.Ndim3).reshape(-1):
                            for j in arange(1,mesh.Ndim2).reshape(-1):
                                for k in arange(1,mesh.Ndim1 - 1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2)
                                    nodeindex2=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2) + mesh.Ndim1
                                    nodeindex3=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2) + mesh.Ndim1 + 1
                                    nodeindex4=k + dot((j - 1),mesh.Ndim1) + dot(dot((i - 1),mesh.Ndim1),mesh.Ndim2) + 1
                                    edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                    edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                    edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + (Ndim1 - 1)
                                    edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + 1
                                    faceindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),(Ndim2 - 1))
                                    mesh.faces.nodes[1,faceindex1]=nodeindex1
                                    mesh.faces.nodes[2,faceindex1]=nodeindex4
                                    mesh.faces.nodes[3,faceindex1]=nodeindex3
                                    mesh.faces.nodes[4,faceindex1]=nodeindex2
                                    mesh.nodes.faces[1,nodeindex1]=faceindex1
                                    mesh.nodes.faces[4,nodeindex2]=faceindex1
                                    mesh.nodes.faces[3,nodeindex3]=faceindex1
                                    mesh.nodes.faces[2,nodeindex4]=faceindex1
                                    mesh.faces.id[faceindex1]=faceindex1
                                    mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                    mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                    mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                    mesh.faces.edges[1,faceindex1]=edgeindex1
                                    mesh.faces.edges[2,faceindex1]=edgeindex2
                                    mesh.faces.edges[3,faceindex1]=edgeindex3
                                    mesh.faces.edges[4,faceindex1]=edgeindex4
                                    mesh.edges.faces[1,edgeindex1]=faceindex1
                                    mesh.edges.faces[1,edgeindex2]=faceindex1
                                    mesh.edges.faces[2,edgeindex3]=faceindex1
                                    mesh.edges.faces[2,edgeindex4]=faceindex1
                        for i in arange(1,mesh.Ndim3).reshape(-1):
                            for j in arange(1,mesh.Ndim2 - 1).reshape(-1):
                                for k in arange(1,mesh.Ndim1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                    nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + 1
                                    nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                    edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                    edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    edgeindex3=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2) + dot((Ndim1 - 1),Ndim2)
                                    edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                    faceindex1=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                    mesh.faces.nodes[1,faceindex1]=nodeindex1
                                    mesh.faces.nodes[2,faceindex1]=nodeindex4
                                    mesh.faces.nodes[3,faceindex1]=nodeindex3
                                    mesh.faces.nodes[4,faceindex1]=nodeindex2
                                    mesh.nodes.faces[5,nodeindex1]=faceindex1
                                    mesh.nodes.faces[8,nodeindex2]=faceindex1
                                    mesh.nodes.faces[7,nodeindex3]=faceindex1
                                    mesh.nodes.faces[6,nodeindex4]=faceindex1
                                    mesh.faces.id[faceindex1]=faceindex1
                                    mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                    mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                    mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                    mesh.faces.edges[1,faceindex1]=edgeindex1
                                    mesh.faces.edges[2,faceindex1]=edgeindex2
                                    mesh.faces.edges[3,faceindex1]=edgeindex3
                                    mesh.faces.edges[4,faceindex1]=edgeindex4
                                    mesh.edges.faces[3,edgeindex1]=faceindex1
                                    mesh.edges.faces[1,edgeindex2]=faceindex1
                                    mesh.edges.faces[4,edgeindex3]=faceindex1
                                    mesh.edges.faces[2,edgeindex4]=faceindex1
                        for i in arange(1,Ndim3 - 1).reshape(-1):
                            for j in arange(1,Ndim2).reshape(-1):
                                for k in arange(1,Ndim1).reshape(-1):
                                    nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                    nodeindex3=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2) + Ndim1
                                    nodeindex4=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                    edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                    edgeindex2=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                    edgeindex3=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1)) + dot(Ndim1,(Ndim2 - 1))
                                    edgeindex4=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                    faceindex1=dot(dot((Ndim1 - 1),(Ndim2 - 1)),Ndim3) + dot(dot((Ndim1 - 1),(Ndim3 - 1)),Ndim2) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                    mesh.faces.nodes[1,faceindex1]=nodeindex1
                                    mesh.faces.nodes[2,faceindex1]=nodeindex4
                                    mesh.faces.nodes[3,faceindex1]=nodeindex3
                                    mesh.faces.nodes[4,faceindex1]=nodeindex2
                                    mesh.nodes.faces[9,nodeindex1]=faceindex1
                                    mesh.nodes.faces[12,nodeindex2]=faceindex1
                                    mesh.nodes.faces[11,nodeindex3]=faceindex1
                                    mesh.nodes.faces[10,nodeindex4]=faceindex1
                                    mesh.faces.id[faceindex1]=faceindex1
                                    mesh.faces.centroid[1,faceindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2) + mesh.nodes.meshcoordinates(1,nodeindex3) + mesh.nodes.meshcoordinates(1,nodeindex4)) / 4
                                    mesh.faces.centroid[2,faceindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2) + mesh.nodes.meshcoordinates(2,nodeindex3) + mesh.nodes.meshcoordinates(2,nodeindex4)) / 4
                                    mesh.faces.centroid[3,faceindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2) + mesh.nodes.meshcoordinates(3,nodeindex3) + mesh.nodes.meshcoordinates(3,nodeindex4)) / 4
                                    mesh.faces.edges[1,faceindex1]=edgeindex1
                                    mesh.faces.edges[2,faceindex1]=edgeindex2
                                    mesh.faces.edges[3,faceindex1]=edgeindex3
                                    mesh.faces.edges[4,faceindex1]=edgeindex4
                                    mesh.edges.faces[3,edgeindex1]=faceindex1
                                    mesh.edges.faces[3,edgeindex2]=faceindex1
                                    mesh.edges.faces[4,edgeindex3]=faceindex1
                                    mesh.edges.faces[4,edgeindex4]=faceindex1
                    else:
                        if edgeflag:
                            mesh.edgeflag = copy(1)
                            mesh.totE = copy(dot(dot((mesh.Ndim1 - 1),mesh.Ndim2),mesh.Ndim3) + dot(dot((mesh.Ndim2 - 1),mesh.Ndim1),mesh.Ndim3) + dot(dot((mesh.Ndim3 - 1),mesh.Ndim1),mesh.Ndim2))
                            if printflag:
                                fprintf('Total number of edges E = %6.2f\\n',mesh.totE)
                                disp(' ')
                            mesh.nodesperedge = copy(2)
                            mesh.edgespernode = copy(6)
                            mesh.nodes.edges = copy(zeros(mesh.edgespernode,mesh.totN))
                            mesh.edges.id = copy(zeros(1,mesh.totE))
                            mesh.edges.centroid = copy(zeros(3,mesh.totE))
                            mesh.edges.nodes = copy(zeros(mesh.nodesperedge,mesh.totE))
                            for i in arange(1,Ndim3).reshape(-1):
                                for j in arange(1,Ndim2).reshape(-1):
                                    for k in arange(1,Ndim1 - 1).reshape(-1):
                                        nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                        nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + 1
                                        edgeindex1=k + dot((j - 1),(Ndim1 - 1)) + dot(dot((i - 1),(Ndim1 - 1)),Ndim2)
                                        mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                        mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                        mesh.nodes.edges[2,nodeindex1]=edgeindex1
                                        mesh.nodes.edges[1,nodeindex2]=edgeindex1
                                        mesh.edges.id[edgeindex1]=edgeindex1
                                        mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                        mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                        mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                            for i in arange(1,Ndim3).reshape(-1):
                                for j in arange(1,Ndim2 - 1).reshape(-1):
                                    for k in arange(1,Ndim1).reshape(-1):
                                        nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                        nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + Ndim1
                                        edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),(Ndim2 - 1))
                                        mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                        mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                        mesh.nodes.edges[4,nodeindex1]=edgeindex1
                                        mesh.nodes.edges[3,nodeindex2]=edgeindex1
                                        mesh.edges.id[edgeindex1]=edgeindex1
                                        mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                        mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                        mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
                            for i in arange(1,Ndim3 - 1).reshape(-1):
                                for j in arange(1,Ndim2).reshape(-1):
                                    for k in arange(1,Ndim1).reshape(-1):
                                        nodeindex1=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                        nodeindex2=k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2) + dot(Ndim1,Ndim2)
                                        edgeindex1=dot(dot((Ndim1 - 1),Ndim2),Ndim3) + dot(dot((Ndim2 - 1),Ndim1),Ndim3) + k + dot((j - 1),Ndim1) + dot(dot((i - 1),Ndim1),Ndim2)
                                        mesh.edges.nodes[1,edgeindex1]=nodeindex1
                                        mesh.edges.nodes[2,edgeindex1]=nodeindex2
                                        mesh.nodes.edges[6,nodeindex1]=edgeindex1
                                        mesh.nodes.edges[5,nodeindex2]=edgeindex1
                                        mesh.edges.id[edgeindex1]=edgeindex1
                                        mesh.edges.centroid[1,edgeindex1]=(mesh.nodes.meshcoordinates(1,nodeindex1) + mesh.nodes.meshcoordinates(1,nodeindex2)) / 2
                                        mesh.edges.centroid[2,edgeindex1]=(mesh.nodes.meshcoordinates(2,nodeindex1) + mesh.nodes.meshcoordinates(2,nodeindex2)) / 2
                                        mesh.edges.centroid[3,edgeindex1]=(mesh.nodes.meshcoordinates(3,nodeindex1) + mesh.nodes.meshcoordinates(3,nodeindex2)) / 2
            else:
                disp('Dimension of space requested is currently not supported')
    
    return mesh
    
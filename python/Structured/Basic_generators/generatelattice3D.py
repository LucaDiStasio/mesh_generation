# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def generatelattice3D(eta1min=None,Neta1=None,deltaeta1=None,eta2min=None,Neta2=None,deltaeta2=None,eta3min=None,Neta3=None,deltaeta3=None,xmin=None,xmax=None,Nx=None,ymin=None,ymax=None,Ny=None,zmin=None,zmax=None,Nz=None,*args,**kwargs):
    varargin = generatelattice3D.varargin
    nargin = generatelattice3D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: June 26th, 2014
#    Last update: June 26th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    lattice=zeros(dot(dot(Nx,Ny),Nz),9)
    deltax=(xmax - xmin) / (Nx - 1)
    deltay=(ymax - ymin) / (Ny - 1)
    deltaz=(zmax - zmin) / (Nz - 1)
    xs=(arange(xmin,xmax,deltax)).T
    ys=zeros(dot(Nx,Ny),2)
    eta1s=(arange(eta1min,eta1min + dot(deltaeta1,(Neta1 - 1)),deltaeta1)).T
    eta2s=zeros(dot(Neta1,Neta2),2)
    for j in arange(1,Neta2).reshape(-1):
        eta2s[dot((j - 1),Neta1) + 1:dot(j,Neta1),1]=eta1s
        eta2s[dot((j - 1),Neta1) + 1:dot(j,Neta1),2]=dot((eta2min + dot(deltaeta2,(j - 1))),ones(Neta1,1))
    
    clear('eta1s')
    for k in arange(1,Neta3).reshape(-1):
        lattice[dot(dot((k - 1),Neta1),Neta2) + 1:dot(dot(k,Neta1),Neta2),1:2]=eta2s
        lattice[dot(dot((k - 1),Neta1),Neta2) + 1:dot(dot(k,Neta1),Neta2),3]=dot((eta3min + dot(deltaeta3,(k - 1))),ones(dot(Neta1,Neta2),1))
    
    clear('eta2s')
    for j in arange(1,Ny).reshape(-1):
        ys[dot((j - 1),Nx) + 1:dot(j,Nx),1]=xs
        ys[dot((j - 1),Nx) + 1:dot(j,Nx),2]=dot((ymin + dot(deltay,(j - 1))),ones(Nx,1))
    
    clear('xs')
    for k in arange(1,Nz).reshape(-1):
        lattice[dot(dot((k - 1),Nx),Ny) + 1:dot(dot(k,Nx),Ny),4:5]=ys
        lattice[dot(dot((k - 1),Nx),Ny) + 1:dot(dot(k,Nx),Ny),6]=dot((zmin + dot(deltaz,(k - 1))),ones(dot(Nx,Ny),1))
    
    clear('ys')
    lattice[:,7:9]=lattice[:,4:6]
    # indeces for finite difference method
# indices = (1:Nx*Ny*Nz)';
# 
# indecesfacexz1 = zeros(Nx*Nz,1);
# indecesfacexz2 = zeros(Nx*Nz,1);
# indecesfacexy1 = zeros(Nx*Ny,1);
# indecesfacexy2 = zeros(Nx*Ny,1);
# indecesfaceyz1 = zeros(Ny*Nz,1);
# indecesfaceyz2 = zeros(Ny*Nz,1);
# 
# for i=1:Nx
#     for k=1:Nz
#         j1 = 1;
#         j2 = Ny;
#         indecesfacexz1(i+(k-1)*Nx) = i+(j1-1)*Nx+(k-1)*Nx*Ny;
#         indecesfacexz2(i+(k-1)*Nx) = i+(j2-1)*Nx+(k-1)*Nx*Ny;
#     end
# end
# for i=1:Nx
#     for j=1:Ny
#         k1 = 1;
#         k2 = Nz;
#         indecesfacexy1(i+(j-1)*Nx) = i+(j-1)*Nx+(k1-1)*Nx*Ny;
#         indecesfacexy2(i+(j-1)*Nx) = i+(j-1)*Nx+(k2-1)*Nx*Ny;
#     end
# end
# for j=1:Ny
#     for k=1:Nz
#         i1 = 1;
#         i2 = Nx;
#         indecesfaceyz1(j+(k-1)*Ny) = i1+(j-1)*Nx+(k-1)*Nx*Ny;
#         indecesfaceyz2(j+(k-1)*Ny) = i2+(j-1)*Nx+(k-1)*Nx*Ny;
#     end
# end
# 
# lattice(:,4) = deltaeta1*ones(Nx*Ny*Nz,1);
# lattice(:,5) = indices - 1;
# lattice(indecesfaceyz1,5) = indecesfaceyz1;
# lattice(:,6) = indices + 1;
# lattice(indecesfaceyz2,6) = 
# lattice(:,7) = deltaeta2*ones(Nx*Ny*Nz,1);
# lattice(:,8) = indices - Nx;
# lattice(:,9) = indices + Nx;
# lattice(:,10) = deltaeta3*ones(Nx*Ny*Nz,1);
# lattice(:,11) = indices - Nx*Ny;
# lattice(:,12) = indices + Nx*Ny;
    
    return lattice
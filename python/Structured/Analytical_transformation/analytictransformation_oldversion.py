# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def analytictransformation(D=None,oldmesh=None,funcs=None,args=None,*args,**kwargs):
    varargin = analytictransformation.varargin
    nargin = analytictransformation.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: March 27th, 2014
#    Last update: June 12th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    mesh=copy(oldmesh)
    if 2 == D:
        g1=inline(char(funcs[1]),char(args[1]),char(args[2]))
        g2=inline(char(funcs[2]),char(args[1]),char(args[2]))
        if oldmesh.edgeflag and oldmesh.faceflag:
            for i in arange(1,oldmesh.totN).reshape(-1):
                mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
                mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
            for i in arange(1,oldmesh.totE).reshape(-1):
                mesh.edges.centroid[1,i]=g1[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i)]
                mesh.edges.centroid[2,i]=g2[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i)]
            for i in arange(1,oldmesh.totF).reshape(-1):
                mesh.faces.centroid[1,i]=g1[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i)]
                mesh.faces.centroid[2,i]=g2[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i)]
        else:
            if oldmesh.edgeflag:
                for i in arange(1,oldmesh.totN).reshape(-1):
                    mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
                    mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
                for i in arange(1,oldmesh.totE).reshape(-1):
                    mesh.edges.centroid[1,i]=g1[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i)]
                    mesh.edges.centroid[2,i]=g2[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i)]
            else:
                for i in arange(1,oldmesh.totN).reshape(-1):
                    mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
                    mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i)]
        for j in arange(1,mesh.Ndim2).reshape(-1):
            coord3=0
            for l in arange(1,mesh.Nlinesdim1).reshape(-1):
                mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 1]=g1[oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + 2)]
                mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 2]=g2[oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + 2)]
                mesh.coordlines.dim1free[l,dot(3,(j - 1)) + 3]=coord3
        for k in arange(1,mesh.Ndim1).reshape(-1):
            coord3=0
            for l in arange(1,mesh.Nlinesdim2).reshape(-1):
                mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 1]=g1[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + 2)]
                mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 2]=g2[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + 2)]
                mesh.coordlines.dim2free[l,dot(3,(k - 1)) + 3]=coord3
    else:
        if 3 == D:
            g1=inline(char(funcs[1]),char(args[1]),char(args[2]),char(args[3]))
            g2=inline(char(funcs[2]),char(args[1]),char(args[2]),char(args[3]))
            g3=inline(char(funcs[3]),char(args[1]),char(args[2]),char(args[3]))
            if oldmesh.edgeflag and oldmesh.faceflag and oldmesh.cellflag:
                for i in arange(1,oldmesh.totN).reshape(-1):
                    mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                    mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                    mesh.nodes.meshcoordinates[3,i]=g3[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                for i in arange(1,oldmesh.totE).reshape(-1):
                    mesh.edges.centroid[1,i]=g1[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                    mesh.edges.centroid[2,i]=g2[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                    mesh.edges.centroid[3,i]=g3[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                for i in arange(1,oldmesh.totF).reshape(-1):
                    mesh.faces.centroid[1,i]=g1[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                    mesh.faces.centroid[2,i]=g2[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                    mesh.faces.centroid[3,i]=g3[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                for i in arange(1,oldmesh.totC).reshape(-1):
                    mesh.cells.centroid[1,i]=g1[oldmesh.cells.centroid(1,i),oldmesh.cells.centroid(2,i),oldmesh.cells.centroid(3,i)]
                    mesh.cells.centroid[2,i]=g2[oldmesh.cells.centroid(1,i),oldmesh.cells.centroid(2,i),oldmesh.cells.centroid(3,i)]
                    mesh.cells.centroid[3,i]=g3[oldmesh.cells.centroid(1,i),oldmesh.cells.centroid(2,i),oldmesh.cells.centroid(3,i)]
            else:
                if oldmesh.edgeflag and oldmesh.faceflag:
                    for i in arange(1,oldmesh.totN).reshape(-1):
                        mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                        mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                        mesh.nodes.meshcoordinates[3,i]=g3[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                    for i in arange(1,oldmesh.totE).reshape(-1):
                        mesh.edges.centroid[1,i]=g1[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                        mesh.edges.centroid[2,i]=g2[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                        mesh.edges.centroid[3,i]=g3[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                    for i in arange(1,oldmesh.totF).reshape(-1):
                        mesh.faces.centroid[1,i]=g1[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                        mesh.faces.centroid[2,i]=g2[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                        mesh.faces.centroid[3,i]=g3[oldmesh.faces.centroid(1,i),oldmesh.faces.centroid(2,i),oldmesh.faces.centroid(3,i)]
                else:
                    if oldmesh.edgeflag:
                        for i in arange(1,oldmesh.totN).reshape(-1):
                            mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                            mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                            mesh.nodes.meshcoordinates[3,i]=g3[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                        for i in arange(1,oldmesh.totE).reshape(-1):
                            mesh.edges.centroid[1,i]=g1[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                            mesh.edges.centroid[2,i]=g2[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                            mesh.edges.centroid[3,i]=g3[oldmesh.edges.centroid(1,i),oldmesh.edges.centroid(2,i),oldmesh.edges.centroid(3,i)]
                    else:
                        for i in arange(1,oldmesh.totN).reshape(-1):
                            mesh.nodes.meshcoordinates[1,i]=g1[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                            mesh.nodes.meshcoordinates[2,i]=g2[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
                            mesh.nodes.meshcoordinates[3,i]=g3[oldmesh.nodes.meshcoordinates(1,i),oldmesh.nodes.meshcoordinates(2,i),oldmesh.nodes.meshcoordinates(3,i)]
            for i in arange(1,mesh.Ndim3).reshape(-1):
                for j in arange(1,mesh.Ndim2).reshape(-1):
                    for l in arange(1,mesh.Nlinesdim1).reshape(-1):
                        mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 1]=g1[oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 3)]
                        mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 2]=g2[oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 3)]
                        mesh.coordlines.dim1free[l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 3]=g3[oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(j - 1)) + dot(dot(3,mesh.Ndim2),(i - 1)) + 3)]
            for i in arange(1,mesh.Ndim3).reshape(-1):
                for k in arange(1,mesh.Ndim1).reshape(-1):
                    for l in arange(1,mesh.Nlinesdim2).reshape(-1):
                        mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 1]=g1[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 3)]
                        mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 2]=g2[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 3)]
                        mesh.coordlines.dim2free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 3]=g3[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(i - 1)) + 3)]
            for j in arange(1,mesh.Ndim2).reshape(-1):
                for k in arange(1,mesh.Ndim1).reshape(-1):
                    for l in arange(1,mesh.Nlinesdim3).reshape(-1):
                        mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 1]=g1[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 3)]
                        mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 2]=g2[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 3)]
                        mesh.coordlines.dim3free[l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 3]=g3[oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 1),oldmesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 2),mesh.coordlines.dim1free(l,dot(3,(k - 1)) + dot(dot(3,mesh.Ndim1),(j - 1)) + 3)]
        else:
            disp('Dimension of space requested is currently not supported')
    
    return mesh
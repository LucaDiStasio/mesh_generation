# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def quad4optimize(nodes=None,elements=None,boundary=None,obj=None,tol=None,maxIt=None,*args,**kwargs):
    varargin = quad4optimize.varargin
    nargin = quad4optimize.nargin

    ##
#==============================================================================
# Copyright (c) 2016 Universit de Lorraine & Lule tekniska universitet
# Author: Luca Di Stasio <luca.distasio@gmail.com>
#                        <luca.distasio@ingpec.eu>
    
    # Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 
# Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the distribution
# Neither the name of the Universit de Lorraine or Lule tekniska universitet
# nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#==============================================================================
    
    #  DESCRIPTION
#  
#  A function to optimize meshes with 4-nodes linear quadrilateral elements
    
    # REFERENCES
# [1] Gang Mei, John C. Tipper and Nengxiong Xu, The Modified Direct Method: an Approach for Smoothing Planar and Surface Meshes. Procedia Computer Science 18(2013) 2436-2439
#     Link: http://arxiv.org/pdf/1212.3133.pdf
# [2] Gang Mei, John C. Tipper and Nengxiong Xu, A Hybrid Approach for Optimizing Planar Triangular Meshes. 2012 2nd International Conference on Computer Science and Network Technology (ICCSNT), pp.968,972, 29-31 Dec. 2012
#     Link: https://arxiv.org/ftp/arxiv/papers/1212/1212.6045.pdf
# [3] K. Ho-Le, Finite element mesh generation methods: a review and classification. Computer-Aided Design, 20(1):2738, 1988
#     Link: http://www.ann.jussieu.fr/frey/papers/meshing/Le#20K.H.,#20Finite#20element#20mesh#20generation#20methods,#20a#20reviewand#20classification.pdf
##
    dof=2
    N=size(nodes,1)
    d=dot(0.25,ones(dot(dof,N),1))
    for i in arange(1,length(boundary)).reshape(-1):
        d[dot(dof,(boundary[i] - 1)) + 1]=1
        d[dot(dof,(boundary[i] - 1)) + 2]=1
    
    D=spdiags(d,0,dot(dof,N),dot(dof,N))
    clear('d')
    k=matlabarray(cat([0,0,0.5,0.5,0,0,0.5,- 0.5],[0,0,- 0.5,0.5,0,0,0.5,0.5],[0.5,- 0.5,0,0,0.5,0.5,0,0],[0.5,0.5,0,0,- 0.5,0.5,0,0],[0,0,0.5,- 0.5,0,0,0.5,0.5],[0,0,0.5,0.5,0,0,- 0.5,0.5],[0.5,0.5,0,0,0.5,- 0.5,0,0],[- 0.5,0.5,0,0,0.5,0.5,0,0]))
    K=sparse(dot(dof,N),dot(dof,N))
    for i in arange(1,size(elements,1)).reshape(-1):
        K=K + dot(nodalmaps(N,elements[i,:],dof,1,1),k)
    
    for i in arange(1,length(boundary)).reshape(-1):
        for j in arange(1,N).reshape(-1):
            if j == boundary[i]:
                K[dot(dof,(boundary[i] - 1)) + 1,dot(dof,(j - 1)) + 1]=1
                K[dot(dof,(boundary[i] - 1)) + 1,dot(dof,(j - 1)) + 2]=0
                K[dot(dof,(boundary[i] - 1)) + 2,dot(dof,(j - 1)) + 1]=0
                K[dot(dof,(boundary[i] - 1)) + 2,dot(dof,(j - 1)) + 2]=1
            else:
                K[dot(dof,(boundary[i] - 1)) + 1,dot(dof,(j - 1)) + 1]=0
                K[dot(dof,(boundary[i] - 1)) + 1,dot(dof,(j - 1)) + 2]=0
                K[dot(dof,(boundary[i] - 1)) + 2,dot(dof,(j - 1)) + 1]=0
                K[dot(dof,(boundary[i] - 1)) + 2,dot(dof,(j - 1)) + 2]=0
    
    fshape=quad4quality(nodes,elements)
    it=1
    solveNodes=zeros(dot(dof,N),1)
    for i in arange(1,N).reshape(-1):
        solveNodes[dot(dof,(i - 1)) + 1]=nodes[i,1]
        solveNodes[dot(dof,(i - 1)) + 2]=nodes[i,2]
    
    optNodes=copy(nodes)
    while abs(fshape - obj) >= tol and it <= maxIt:

        solveNodes=dot(D,(dot(K,solveNodes)))
        for i in arange(1,N).reshape(-1):
            optNodes[i,1]=solveNodes[dot(dof,(i - 1)) + 1]
            optNodes[i,2]=solveNodes[dot(dof,(i - 1)) + 2]
        fshape=quad4quality(optNodes,elements)
        it=it + 1

    
    return optNodes
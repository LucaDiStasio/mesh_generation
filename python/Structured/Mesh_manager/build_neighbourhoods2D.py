# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def build_neighbourhoods2D(N=None,Nx=None,flagperiodicity=None,periodicity=None,flagintbounds=None,indicesintbounds=None,typeintbounds=None,indicesbulk=None,indicesinternalbulk=None,indicesE1=None,indicesE2=None,indicesE3=None,indicesE4=None,indicesexternalE1=None,indicesexternalE2=None,indicesexternalE3=None,indicesexternalE4=None,indicesinternalE1=None,indicesinternalE2=None,indicesinternalE3=None,indicesinternalE4=None,indicesC1=None,indicesC2=None,indicesC3=None,indicesC4=None,indicesinternalC1=None,indicesinternalC2=None,indicesinternalC3=None,indicesinternalC4=None,*args,**kwargs):
    varargin = build_neighbourhoods2D.varargin
    nargin = build_neighbourhoods2D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: July 10th, 2014
#    Last update: August 7th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    #                 Integer mask for periodicity:
#                 1  --> neighbour of E1 - E3
#                 2  --> neighbour of E2 - E4
#                 3  --> neighbour of C1 - C3
#                 4  --> neighbour of C2 - C4
    
    #                 Integer mask for internal boundary topology:
#                 1  --> hole C1 
#                 2  --> hole C2
#                 3  --> hole C3
#                 4  --> hole C4
#                 5  --> E1
#                 6  --> E2
#                 7  --> E3
#                 8  --> E4
    
    ##
    
    structuralneighbours=matlabarray(cat(zeros(N,1),dot(- 1,ones(N,4))))
    shearneighbours=matlabarray(cat(zeros(N,1),dot(- 1,ones(N,4))))
    bendneighbours=matlabarray(cat(zeros(N,1),dot(- 1,ones(N,4))))
    firstdevneighbours=zeros(N,8)
    # ---> structural neighbours
    
    structuralneighbours[indicesbulk,:]=cat(dot(4,ones(length(indicesbulk),1)),indicesbulk - 1,indicesbulk + 1,indicesbulk - Nx,indicesbulk + Nx)
    structuralneighbours[indicesE1,:]=cat(dot(3,ones(length(indicesE1),1)),indicesE1 - 1,indicesE1 + 1,dot(- 1,ones(length(indicesE1),1)),indicesE1 + Nx)
    structuralneighbours[indicesE2,:]=cat(dot(3,ones(length(indicesE2),1)),indicesE2 - 1,dot(- 1,ones(length(indicesE2),1)),indicesE2 - Nx,indicesE2 + Nx)
    structuralneighbours[indicesE3,:]=cat(dot(3,ones(length(indicesE3),1)),indicesE3 - 1,indicesE3 + 1,indicesE3 - Nx,dot(- 1,ones(length(indicesE3),1)))
    structuralneighbours[indicesE4,:]=cat(dot(3,ones(length(indicesE4),1)),dot(- 1,ones(length(indicesE4),1)),indicesE4 + 1,indicesE4 - Nx,indicesE4 + Nx)
    structuralneighbours[indicesC1,:]=cat(dot(2,ones(length(indicesC1),1)),dot(- 1,ones(length(indicesC1),1)),indicesC1 + 1,dot(- 1,ones(length(indicesC1),1)),indicesC1 + Nx)
    structuralneighbours[indicesC2,:]=cat(dot(2,ones(length(indicesC2),1)),indicesC2 - 1,dot(- 1,ones(length(indicesC2),1)),dot(- 1,ones(length(indicesC2),1)),indicesC2 + Nx)
    structuralneighbours[indicesC3,:]=cat(dot(2,ones(length(indicesC3),1)),indicesC3 - 1,dot(- 1,ones(length(indicesC3),1)),indicesC3 - Nx,dot(- 1,ones(length(indicesC3),1)))
    structuralneighbours[indicesC4,:]=cat(dot(2,ones(length(indicesC4),1)),dot(- 1,ones(length(indicesC4),1)),indicesC4 + 1,indicesC4 - Nx,dot(- 1,ones(length(indicesC4),1)))
    if flagperiodicity:
        for i in arange(1,size(periodicity,1)).reshape(-1):
            if 1 == periodicity[i,1]:
                structuralneighbours[indicesE1,1]=structuralneighbours[indicesE1,1] + 1
                structuralneighbours[indicesE3,1]=structuralneighbours[indicesE3,1] + 1
                structuralneighbours[indicesE1,4]=indicesE3
                structuralneighbours[indicesE3,5]=indicesE1
                structuralneighbours[indicesC1,1]=structuralneighbours[indicesC1,1] + 1
                structuralneighbours[indicesC2,1]=structuralneighbours[indicesC2,1] + 1
                structuralneighbours[indicesC3,1]=structuralneighbours[indicesC3,1] + 1
                structuralneighbours[indicesC4,1]=structuralneighbours[indicesC4,1] + 1
                structuralneighbours[indicesC1,4]=indicesC4
                structuralneighbours[indicesC2,4]=indicesC3
                structuralneighbours[indicesC3,5]=indicesC2
                structuralneighbours[indicesC4,5]=indicesC1
            else:
                if 2 == periodicity[i,1]:
                    structuralneighbours[indicesE2,1]=structuralneighbours[indicesE2,1] + 1
                    structuralneighbours[indicesE4,1]=structuralneighbours[indicesE4,1] + 1
                    structuralneighbours[indicesE2,3]=indicesE4
                    structuralneighbours[indicesE4,2]=indicesE2
                    structuralneighbours[indicesC1,1]=structuralneighbours[indicesC1,1] + 1
                    structuralneighbours[indicesC2,1]=structuralneighbours[indicesC2,1] + 1
                    structuralneighbours[indicesC3,1]=structuralneighbours[indicesC3,1] + 1
                    structuralneighbours[indicesC4,1]=structuralneighbours[indicesC4,1] + 1
                    structuralneighbours[indicesC1,2]=indicesC2
                    structuralneighbours[indicesC2,3]=indicesC1
                    structuralneighbours[indicesC3,3]=indicesC4
                    structuralneighbours[indicesC4,2]=indicesC3
                else:
                    if 3 == periodicity[i,1]:
                        pass
                    else:
                        if 4 == periodicity[i,1]:
                            pass
    
    if flagintbounds:
        for i in arange(1,size(indicesintbounds,1)).reshape(-1):
            index=indicesintbounds[i,1]
            if 1 == typeintbounds[i,1]:
                structuralneighbours[index,:]=cat(4,index - 1,index + 1,index - Nx,index + Nx)
            else:
                if 2 == typeintbounds[i,1]:
                    structuralneighbours[index,:]=cat(4,index - 1,index + 1,index - Nx,index + Nx)
                else:
                    if 3 == typeintbounds[i,1]:
                        structuralneighbours[index,:]=cat(4,index - 1,index + 1,index - Nx,index + Nx)
                    else:
                        if 4 == typeintbounds[i,1]:
                            structuralneighbours[index,:]=cat(4,index - 1,index + 1,index - Nx,index + Nx)
                        else:
                            if 5 == typeintbounds[i,1]:
                                structuralneighbours[index,:]=cat(3,index - 1,index + 1,- 1,index + Nx)
                            else:
                                if 6 == typeintbounds[i,1]:
                                    structuralneighbours[index,:]=cat(3,index - 1,- 1,index - Nx,index + Nx)
                                else:
                                    if 7 == typeintbounds[i,1]:
                                        structuralneighbours[index,:]=cat(3,index - 1,index + 1,index - Nx,- 1)
                                    else:
                                        if 8 == typeintbounds[i,1]:
                                            structuralneighbours[index,:]=cat(3,- 1,index + 1,index - Nx,index + Nx)
    
    # ---> shear neighbours
    
    A=- 1 - Nx
    B=+ 1 - Nx
    C=+ 1 + Nx
    D=- 1 + Nx
    shearneighbours[indicesbulk,:]=cat(dot(4,ones(length(indicesbulk),1)),indicesbulk + A,indicesbulk + B,indicesbulk + C,indicesbulk + D)
    shearneighbours[indicesE1,:]=cat(dot(2,ones(length(indicesE1),1)),dot(- 1,ones(length(indicesE1),1)),dot(- 1,ones(length(indicesE1),1)),indicesE1 + C,indicesE1 + D)
    shearneighbours[indicesE2,:]=cat(dot(2,ones(length(indicesE2),1)),indicesE2 + A,dot(- 1,ones(length(indicesE2),1)),dot(- 1,ones(length(indicesE2),1)),indicesE2 + D)
    shearneighbours[indicesE3,:]=cat(dot(2,ones(length(indicesE3),1)),indicesE3 + A,indicesE3 + B,dot(- 1,ones(length(indicesE3),1)),dot(- 1,ones(length(indicesE3),1)))
    shearneighbours[indicesE4,:]=cat(dot(2,ones(length(indicesE4),1)),dot(- 1,ones(length(indicesE4),1)),indicesE4 + B,indicesE4 + C,dot(- 1,ones(length(indicesE4),1)))
    shearneighbours[indicesC1,:]=cat(dot(1,ones(length(indicesC1),1)),dot(- 1,ones(length(indicesC1),1)),dot(- 1,ones(length(indicesC1),1)),indicesC1 + C,dot(- 1,ones(length(indicesC1),1)))
    shearneighbours[indicesC2,:]=cat(dot(1,ones(length(indicesC2),1)),dot(- 1,ones(length(indicesC2),1)),dot(- 1,ones(length(indicesC2),1)),dot(- 1,ones(length(indicesC2),1)),indicesC2 + D)
    shearneighbours[indicesC3,:]=cat(dot(1,ones(length(indicesC3),1)),indicesC3 + A,dot(- 1,ones(length(indicesC3),1)),dot(- 1,ones(length(indicesC3),1)),dot(- 1,ones(length(indicesC3),1)))
    shearneighbours[indicesC4,:]=cat(dot(1,ones(length(indicesC4),1)),dot(- 1,ones(length(indicesC4),1)),indicesC4 + B,dot(- 1,ones(length(indicesC4),1)),dot(- 1,ones(length(indicesC4),1)))
    if flagintbounds:
        for i in arange(1,size(indicesintbounds,1)).reshape(-1):
            index=indicesintbounds[i,1]
            if 1 == typeintbounds[i,1]:
                shearneighbours[index,:]=cat(3,index + A,index + B,- 1,index + D)
            else:
                if 2 == typeintbounds[i,1]:
                    shearneighbours[index,:]=cat(3,index + A,index + B,index + C,- 1)
                else:
                    if 3 == typeintbounds[i,1]:
                        shearneighbours[index,:]=cat(3,- 1,index + B,index + C,index + D)
                    else:
                        if 4 == typeintbounds[i,1]:
                            shearneighbours[index,:]=cat(3,index + A,- 1,index + C,index + D)
                        else:
                            if 5 == typeintbounds[i,1]:
                                shearneighbours[index,:]=cat(2,- 1,- 1,index + C,index + D)
                            else:
                                if 6 == typeintbounds[i,1]:
                                    shearneighbours[index,:]=cat(2,index + A,- 1,- 1,index + D)
                                else:
                                    if 7 == typeintbounds[i,1]:
                                        shearneighbours[index,:]=cat(2,index + A,index + B,- 1,- 1)
                                    else:
                                        if 8 == typeintbounds[i,1]:
                                            shearneighbours[index,:]=cat(2,- 1,index + B,index + C,- 1)
    
    # ---> bend neighbours
    
    bendneighbours[indicesinternalbulk,:]=cat(dot(4,ones(length(indicesinternalbulk),1)),indicesinternalbulk - 2,indicesinternalbulk + 2,indicesinternalbulk - dot(2,Nx),indicesinternalbulk + dot(2,Nx))
    bendneighbours[indicesexternalE1,:]=cat(dot(4,ones(length(indicesexternalE1),1)),indicesexternalE1 - 2,indicesexternalE1 + 2,dot(- 1,ones(length(indicesexternalE1),1)),indicesexternalE1 + dot(2,Nx))
    bendneighbours[indicesexternalE2,:]=cat(dot(4,ones(length(indicesexternalE2),1)),indicesexternalE2 - 2,dot(- 1,ones(length(indicesexternalE2),1)),indicesexternalE2 - dot(2,Nx),indicesexternalE2 + dot(2,Nx))
    bendneighbours[indicesexternalE3,:]=cat(dot(4,ones(length(indicesexternalE3),1)),indicesexternalE3 - 2,indicesexternalE3 + 2,indicesexternalE3 - dot(2,Nx),dot(- 1,ones(length(indicesexternalE3),1)))
    bendneighbours[indicesexternalE4,:]=cat(dot(4,ones(length(indicesexternalE4),1)),dot(- 1,ones(length(indicesexternalE4),1)),indicesexternalE4 + 2,indicesexternalE4 - dot(2,Nx),indicesexternalE4 + dot(2,Nx))
    bendneighbours[indicesC1,:]=cat(dot(3,ones(length(indicesC1),1)),dot(- 1,ones(length(indicesC1),1)),indicesC1 + 2,dot(- 1,ones(length(indicesC1),1)),indicesC1 + dot(2,Nx))
    bendneighbours[indicesC2,:]=cat(dot(3,ones(length(indicesC2),1)),indicesC2 - 2,dot(- 1,ones(length(indicesC2),1)),dot(- 1,ones(length(indicesC2),1)),indicesC2 + dot(2,Nx))
    bendneighbours[indicesC3,:]=cat(dot(3,ones(length(indicesC3),1)),indicesC3 - 2,dot(- 1,ones(length(indicesC3),1)),indicesC3 - dot(2,Nx),dot(- 1,ones(length(indicesC3),1)))
    bendneighbours[indicesC4,:]=cat(dot(3,ones(length(indicesC4),1)),dot(- 1,ones(length(indicesC4),1)),indicesC4 + 2,indicesC4 - dot(2,Nx),dot(- 1,ones(length(indicesC4),1)))
    bendneighbours[indicesinternalE1,:]=cat(dot(3,ones(length(indicesinternalE1),1)),indicesinternalE1 - 2,indicesinternalE1 + 2,dot(- 1,ones(length(indicesinternalE1),1)),indicesinternalE1 + dot(2,Nx))
    bendneighbours[indicesinternalE2,:]=cat(dot(3,ones(length(indicesinternalE2),1)),indicesinternalE2 - 2,dot(- 1,ones(length(indicesinternalE2),1)),indicesinternalE2 - dot(2,Nx),indicesinternalE2 + dot(2,Nx))
    bendneighbours[indicesinternalE3,:]=cat(dot(3,ones(length(indicesinternalE3),1)),indicesinternalE3 - 2,indicesinternalE3 + 2,indicesinternalE3 - dot(2,Nx),dot(- 1,ones(length(indicesinternalE3),1)))
    bendneighbours[indicesinternalE4,:]=cat(dot(3,ones(length(indicesinternalE4),1)),dot(- 1,ones(length(indicesinternalE4),1)),indicesinternalE4 + 2,indicesinternalE4 - dot(2,Nx),indicesinternalE4 + dot(2,Nx))
    bendneighbours[indicesinternalC1,:]=cat(dot(2,ones(length(indicesinternalC1),1)),dot(- 1,ones(length(indicesinternalC1),1)),indicesinternalC1 + 2,dot(- 1,ones(length(indicesinternalC1),1)),indicesinternalC1 + dot(2,Nx))
    bendneighbours[indicesinternalC2,:]=cat(dot(2,ones(length(indicesinternalC2),1)),indicesinternalC2 - 2,dot(- 1,ones(length(indicesinternalC2),1)),dot(- 1,ones(length(indicesinternalC2),1)),indicesinternalC2 + dot(2,Nx))
    bendneighbours[indicesinternalC3,:]=cat(dot(2,ones(length(indicesinternalC3),1)),indicesinternalC3 - 2,dot(- 1,ones(length(indicesinternalC3),1)),indicesinternalC3 - dot(2,Nx),dot(- 1,ones(length(indicesinternalC3),1)))
    bendneighbours[indicesinternalC4,:]=cat(dot(2,ones(length(indicesinternalC4),1)),dot(- 1,ones(length(indicesinternalC4),1)),indicesinternalC4 + 2,indicesinternalC4 - dot(2,Nx),dot(- 1,ones(length(indicesinternalC4),1)))
    if flagperiodicity:
        for i in arange(1,size(periodicity,1)).reshape(-1):
            if 1 == periodicity[i,1]:
                structuralneighbours[indicesE1,1]=structuralneighbours[indicesE1,1] + 1
                structuralneighbours[indicesE3,1]=structuralneighbours[indicesE3,1] + 1
                structuralneighbours[indicesE1,4]=indicesE3 - Nx
                structuralneighbours[indicesE3,5]=indicesE1 + Nx
                structuralneighbours[indicesC1,1]=structuralneighbours[indicesC1,1] + 1
                structuralneighbours[indicesC2,1]=structuralneighbours[indicesC2,1] + 1
                structuralneighbours[indicesC3,1]=structuralneighbours[indicesC3,1] + 1
                structuralneighbours[indicesC4,1]=structuralneighbours[indicesC4,1] + 1
                structuralneighbours[indicesC1,4]=indicesC4 - Nx
                structuralneighbours[indicesC2,4]=indicesC3 - Nx
                structuralneighbours[indicesC3,5]=indicesC2 + Nx
                structuralneighbours[indicesC4,5]=indicesC1 + Nx
                structuralneighbours[indicesE1 + Nx,1]=structuralneighbours[indicesE1 + Nx,1] + 1
                structuralneighbours[indicesE3 - Nx,1]=structuralneighbours[indicesE3 - Nx,1] + 1
                structuralneighbours[indicesE1 + Nx,4]=indicesE3
                structuralneighbours[indicesE3 - Nx,5]=indicesE1
                structuralneighbours[indicesC1 + Nx,1]=structuralneighbours[indicesC1 + Nx,1] + 1
                structuralneighbours[indicesC2 + Nx,1]=structuralneighbours[indicesC2 + Nx,1] + 1
                structuralneighbours[indicesC3 - Nx,1]=structuralneighbours[indicesC3 - Nx,1] + 1
                structuralneighbours[indicesC4 - Nx,1]=structuralneighbours[indicesC4 - Nx,1] + 1
                structuralneighbours[indicesC1 + Nx,4]=indicesC4
                structuralneighbours[indicesC2 + Nx,4]=indicesC3
                structuralneighbours[indicesC3 - Nx,5]=indicesC2
                structuralneighbours[indicesC4 - Nx,5]=indicesC1
            else:
                if 2 == periodicity[i,1]:
                    structuralneighbours[indicesE2 - 1,1]=structuralneighbours[indicesE2 - 1,1] + 1
                    structuralneighbours[indicesE4 + 1,1]=structuralneighbours[indicesE4 + 1,1] + 1
                    structuralneighbours[indicesE2 - 1,3]=indicesE4
                    structuralneighbours[indicesE4 + 1,2]=indicesE2
                    structuralneighbours[indicesC1 + 1,1]=structuralneighbours[indicesC1 + 1,1] + 1
                    structuralneighbours[indicesC2 - 1,1]=structuralneighbours[indicesC2 - 1,1] + 1
                    structuralneighbours[indicesC3 - 1,1]=structuralneighbours[indicesC3 - 1,1] + 1
                    structuralneighbours[indicesC4 + 1,1]=structuralneighbours[indicesC4 + 1,1] + 1
                    structuralneighbours[indicesC1 + 1,2]=indicesC2
                    structuralneighbours[indicesC2 - 1,3]=indicesC1
                    structuralneighbours[indicesC3 - 1,3]=indicesC4
                    structuralneighbours[indicesC4 + 1,2]=indicesC3
                    structuralneighbours[indicesE2,1]=structuralneighbours[indicesE2,1] + 1
                    structuralneighbours[indicesE4,1]=structuralneighbours[indicesE4,1] + 1
                    structuralneighbours[indicesE2,3]=indicesE4 + 1
                    structuralneighbours[indicesE4,2]=indicesE2 - 1
                    structuralneighbours[indicesC1,1]=structuralneighbours[indicesC1,1] + 1
                    structuralneighbours[indicesC2,1]=structuralneighbours[indicesC2,1] + 1
                    structuralneighbours[indicesC3,1]=structuralneighbours[indicesC3,1] + 1
                    structuralneighbours[indicesC4,1]=structuralneighbours[indicesC4,1] + 1
                    structuralneighbours[indicesC1,2]=indicesC2 - 1
                    structuralneighbours[indicesC2,3]=indicesC1 + 1
                    structuralneighbours[indicesC3,3]=indicesC4 + 1
                    structuralneighbours[indicesC4,2]=indicesC3 - 1
                else:
                    if 3 == periodicity[i,1]:
                        pass
                    else:
                        if 4 == periodicity[i,1]:
                            pass
    
    if flagintbounds:
        for i in arange(1,size(indicesintbounds,1)).reshape(-1):
            index=indicesintbounds[i,1]
            if 1 == typeintbounds[i,1]:
                bendneighbours[index,:]=cat(4,index - 2,index + 2,index - dot(2,Nx),index + dot(2,Nx))
            else:
                if 2 == typeintbounds[i,1]:
                    bendneighbours[index,:]=cat(4,index - 2,index + 2,index - dot(2,Nx),index + dot(2,Nx))
                else:
                    if 3 == typeintbounds[i,1]:
                        bendneighbours[index,:]=cat(4,index - 2,index + 2,index - dot(2,Nx),index + dot(2,Nx))
                    else:
                        if 4 == typeintbounds[i,1]:
                            bendneighbours[index,:]=cat(4,index - 2,index + 2,index - dot(2,Nx),index + dot(2,Nx))
                        else:
                            if 5 == typeintbounds[i,1]:
                                bendneighbours[index,:]=cat(3,index - 2,index + 2,- 1,index + dot(2,Nx))
                                bendneighbours[index + Nx,:]=cat(3,index - 2,index + 2,- 1,index + dot(2,Nx))
                            else:
                                if 6 == typeintbounds[i,1]:
                                    bendneighbours[index,:]=cat(3,index - 2,- 1,index - dot(2,Nx),index + dot(2,Nx))
                                    bendneighbours[index - 1,:]=cat(3,index - 2,- 1,index - dot(2,Nx),index + dot(2,Nx))
                                else:
                                    if 7 == typeintbounds[i,1]:
                                        bendneighbours[index,:]=cat(3,index - 2,index + 2,index - dot(2,Nx),- 1)
                                        bendneighbours[index - Nx,:]=cat(3,index - 2,index + 2,index - dot(2,Nx),- 1)
                                    else:
                                        if 8 == typeintbounds[i,1]:
                                            bendneighbours[index,:]=cat(3,- 1,index + 2,index - dot(2,Nx),index + dot(2,Nx))
                                            bendneighbours[index + 1,:]=cat(3,- 1,index + 2,index - dot(2,Nx),index + dot(2,Nx))
    
    # ---> first derivatives neighbourhoods
    
    # integer mask for type of finite difference approximation (at 2nd order) for 1st derivative
# 1 --> central finite difference
# 2 --> one-sided finite difference with nodes on + side (missing on - side)
# 3 --> one-sided finite difference with nodes on - side (missing on + side)
    
    firstdevneighbours[indicesbulk,:]=cat(dot(1,ones(length(indicesbulk),1)),indicesbulk - 1,indicesbulk + 1,zeros(length(indicesbulk),1),dot(1,ones(length(indicesbulk),1)),indicesbulk - Nx,indicesbulk + Nx,zeros(length(indicesbulk),1))
    firstdevneighbours[indicesE1,:]=cat(dot(1,ones(length(indicesE1),1)),indicesE1 - 1,indicesE1 + 1,zeros(length(indicesE1),1),dot(2,ones(length(indicesE1),1)),indicesE1,indicesE1 + Nx,indicesE1 + dot(2,Nx))
    firstdevneighbours[indicesE2,:]=cat(dot(3,ones(length(indicesE2),1)),indicesE2,indicesE2 - 1,indicesE2 - 2,dot(1,ones(length(indicesE2),1)),indicesE2 - Nx,indicesE2 + Nx,zeros(length(indicesE2),1))
    firstdevneighbours[indicesE3,:]=cat(dot(1,ones(length(indicesE3),1)),indicesE3 - 1,indicesE3 + 1,zeros(length(indicesE3),1),dot(3,ones(length(indicesE3),1)),indicesE3,indicesE3 - Nx,indicesE3 - dot(2,Nx))
    firstdevneighbours[indicesE4,:]=cat(dot(2,ones(length(indicesE4),1)),indicesE4,indicesE4 + 1,indicesE4 + 2,dot(1,ones(length(indicesE4),1)),indicesE4 - Nx,indicesE4 + Nx,zeros(length(indicesE4),1))
    firstdevneighbours[indicesC1,:]=cat(dot(2,ones(length(indicesC1),1)),indicesC1,indicesC1 + 1,indicesC1 + 2,dot(2,ones(length(indicesC1),1)),indicesC1,indicesC1 + Nx,indicesC1 + dot(2,Nx))
    firstdevneighbours[indicesC2,:]=cat(dot(3,ones(length(indicesC2),1)),indicesC2,indicesC2 - 1,indicesC2 - 2,dot(2,ones(length(indicesC2),1)),indicesC2,indicesC2 + Nx,indicesC2 + dot(2,Nx))
    firstdevneighbours[indicesC3,:]=cat(dot(3,ones(length(indicesC3),1)),indicesC3,indicesC3 - 1,indicesC3 - 2,dot(3,ones(length(indicesC3),1)),indicesC3,indicesC3 - Nx,indicesC3 - dot(2,Nx))
    firstdevneighbours[indicesC4,:]=cat(dot(2,ones(length(indicesC4),1)),indicesC4,indicesC4 + 1,indicesC4 + 2,dot(3,ones(length(indicesC4),1)),indicesC4,indicesC4 - Nx,indicesC4 - dot(2,Nx))
    if flagperiodicity:
        for i in arange(1,size(periodicity,1)).reshape(-1):
            if 1 == periodicity[i,1]:
                firstdevneighbours[indicesE1,5]=ones(length(indicesE1),1)
                firstdevneighbours[indicesE3,5]=ones(length(indicesE1),1)
                firstdevneighbours[indicesE1,6]=indicesE3
                firstdevneighbours[indicesE3,6]=indicesE3 - Nx
                firstdevneighbours[indicesE1,7]=indicesE1 + Nx
                firstdevneighbours[indicesE3,7]=indicesE1
                firstdevneighbours[indicesE1,8]=zeros(length(indicesE1),1)
                firstdevneighbours[indicesE3,8]=zeros(length(indicesE1),1)
                firstdevneighbours[indicesC1,5]=ones(length(indicesC1),1)
                firstdevneighbours[indicesC2,5]=ones(length(indicesC2),1)
                firstdevneighbours[indicesC3,5]=ones(length(indicesC3),1)
                firstdevneighbours[indicesC4,5]=ones(length(indicesC4),1)
                firstdevneighbours[indicesC1,6]=indicesC4
                firstdevneighbours[indicesC2,6]=indicesC3
                firstdevneighbours[indicesC3,6]=indicesC3 - Nx
                firstdevneighbours[indicesC4,6]=indicesC4 - Nx
                firstdevneighbours[indicesC1,7]=indicesC1 + Nx
                firstdevneighbours[indicesC2,7]=indicesC2 + Nx
                firstdevneighbours[indicesC3,7]=indicesC2
                firstdevneighbours[indicesC4,7]=indicesC1
                firstdevneighbours[indicesC1,8]=zeros(length(indicesC1),1)
                firstdevneighbours[indicesC2,8]=zeros(length(indicesC2),1)
                firstdevneighbours[indicesC3,8]=zeros(length(indicesC3),1)
                firstdevneighbours[indicesC4,8]=zeros(length(indicesC4),1)
            else:
                if 2 == periodicity[i,1]:
                    firstdevneighbours[indicesE2,1]=ones(length(indicesE2),1)
                    firstdevneighbours[indicesE4,1]=ones(length(indicesE4),1)
                    firstdevneighbours[indicesE2,2]=indicesE2 - 1
                    firstdevneighbours[indicesE4,2]=indicesE2
                    firstdevneighbours[indicesE2,3]=indicesE4
                    firstdevneighbours[indicesE4,3]=indicesE4 + 1
                    firstdevneighbours[indicesE2,4]=zeros(length(indicesE2),1)
                    firstdevneighbours[indicesE4,4]=zeros(length(indicesE4),1)
                    firstdevneighbours[indicesC1,1]=ones(length(indicesC1),1)
                    firstdevneighbours[indicesC2,1]=ones(length(indicesC2),1)
                    firstdevneighbours[indicesC3,1]=ones(length(indicesC3),1)
                    firstdevneighbours[indicesC4,1]=ones(length(indicesC4),1)
                    firstdevneighbours[indicesC1,2]=indicesC2
                    firstdevneighbours[indicesC2,2]=indicesC2 - 1
                    firstdevneighbours[indicesC3,2]=indicesC3 - 1
                    firstdevneighbours[indicesC4,2]=indicesC3
                    firstdevneighbours[indicesC1,3]=indicesC1 + 1
                    firstdevneighbours[indicesC2,3]=indicesC1
                    firstdevneighbours[indicesC3,3]=indicesC4
                    firstdevneighbours[indicesC4,3]=indicesC4 + 1
                    firstdevneighbours[indicesC1,4]=zeros(length(indicesC1),1)
                    firstdevneighbours[indicesC2,4]=zeros(length(indicesC2),1)
                    firstdevneighbours[indicesC3,4]=zeros(length(indicesC3),1)
                    firstdevneighbours[indicesC4,4]=zeros(length(indicesC4),1)
                else:
                    if 3 == periodicity[i,1]:
                        pass
                    else:
                        if 4 == periodicity[i,1]:
                            pass
    
    if flagintbounds:
        for i in arange(1,size(indicesintbounds,1)).reshape(-1):
            index=indicesintbounds[i,1]
            if 1 == typeintbounds[i,1]:
                firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,1,index - Nx,index + Nx,0)
            else:
                if 2 == typeintbounds[i,1]:
                    firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,1,index - Nx,index + Nx,0)
                else:
                    if 3 == typeintbounds[i,1]:
                        firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,1,index - Nx,index + Nx,0)
                    else:
                        if 4 == typeintbounds[i,1]:
                            firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,1,index - Nx,index + Nx,0)
                        else:
                            if 5 == typeintbounds[i,1]:
                                firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,2,index,index + Nx,index + dot(2,Nx))
                            else:
                                if 6 == typeintbounds[i,1]:
                                    firstdevneighbours[index,:]=cat(3,index,index - 1,index - 2,1,index - Nx,index + Nx,0)
                                else:
                                    if 7 == typeintbounds[i,1]:
                                        firstdevneighbours[index,:]=cat(1,index - 1,index + 1,0,3,index,index - Nx,index - dot(2,Nx))
                                    else:
                                        if 8 == typeintbounds[i,1]:
                                            firstdevneighbours[index,:]=cat(2,index,index + 1,index + 2,1,index - Nx,index + Nx,0)
    
    return structuralneighbours,shearneighbours,bendneighbours,firstdevneighbours
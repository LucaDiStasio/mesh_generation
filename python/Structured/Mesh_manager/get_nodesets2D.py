# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def get_nodesets2D(N=None,lattice=None,operator=None,bounds=None,functions=None,*args,**kwargs):
    varargin = get_nodesets2D.varargin
    nargin = get_nodesets2D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: July 10th, 2014
#    Last update: July 10th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    #          integer mask for set type:
#          1 --> input
#          2 --> measurements
#          3 --> control
    
    #          integer mask for operator:
#          1 --> g() <
#          2 --> g() <=
#          3 --> g() ==
#          4 --> g() >=
#          5 --> g() >
#          6 --> < g() <
#          7 --> <= g() <
#          8 --> < g() <=
#          9 --> <= g() <=
    
    ##
    
    nbounds=length(operator)
    sets=zeros(N,nbounds)
    for j in arange(1,nbounds).reshape(-1):
        for i in arange(1,N).reshape(-1):
            if 1 == operator[j]:
                if functions[j](lattice[i,3],lattice[i,4]) < bounds[j,1]:
                    sets[i,j]=1
            else:
                if 2 == operator[j]:
                    if functions[j](lattice[i,3],lattice[i,4]) <= bounds[j,1]:
                        sets[i,j]=1
                else:
                    if 3 == operator[j]:
                        if functions[j](lattice[i,3],lattice[i,4]) == bounds[j,1]:
                            sets[i,j]=1
                    else:
                        if 4 == operator[j]:
                            if functions[j](lattice[i,3],lattice[i,4]) >= bounds[j,1]:
                                sets[i,j]=1
                        else:
                            if 5 == operator[j]:
                                if functions[j](lattice[i,3],lattice[i,4]) > bounds[j,1]:
                                    sets[i,j]=1
                            else:
                                if 6 == operator[j]:
                                    if functions[j](lattice[i,3],lattice[i,4]) > bounds[j,1] and functions[j](lattice[i,3],lattice[i,4]) < bounds[j,2]:
                                        sets[i,j]=1
                                else:
                                    if 7 == operator[j]:
                                        if functions[j](lattice[i,3],lattice[i,4]) >= bounds[j,1] and functions[j](lattice[i,3],lattice[i,4]) < bounds[j,2]:
                                            sets[i,j]=1
                                    else:
                                        if 8 == operator[j]:
                                            if functions[j](lattice[i,3],lattice[i,4]) > bounds[j,1] and functions[j](lattice[i,3],lattice[i,4]) <= bounds[j,2]:
                                                sets[i,j]=1
                                        else:
                                            if 9 == operator[j]:
                                                if functions[j](lattice[i,3],lattice[i,4]) >= bounds[j,1] and functions[j](lattice[i,3],lattice[i,4]) <= bounds[j,2]:
                                                    sets[i,j]=1
    
    return sets